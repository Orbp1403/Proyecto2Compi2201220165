/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,38],$V3=[1,37],$V4=[1,41],$V5=[1,40],$V6=[1,16],$V7=[1,11],$V8=[1,21],$V9=[1,39],$Va=[1,43],$Vb=[1,42],$Vc=[1,36],$Vd=[1,13],$Ve=[1,12],$Vf=[1,14],$Vg=[1,15],$Vh=[1,17],$Vi=[1,18],$Vj=[1,19],$Vk=[1,20],$Vl=[1,24],$Vm=[1,34],$Vn=[1,35],$Vo=[2,5,18,28,29,30,33,34,35,36,40,41,42,46,59,64,65,74,80,81,82,83,85,88,90],$Vp=[1,71],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,70],$Vy=[1,49],$Vz=[1,50],$VA=[1,51],$VB=[1,52],$VC=[1,53],$VD=[1,54],$VE=[1,55],$VF=[1,56],$VG=[1,58],$VH=[1,57],$VI=[1,59],$VJ=[1,60],$VK=[1,61],$VL=[1,62],$VM=[1,77],$VN=[10,13,31,32,36,39,51,52,53,54,55,56,57,58,62,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VO=[13,31,51,52,53,54,55,56,57,58,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VP=[2,105],$VQ=[1,82],$VR=[1,83],$VS=[2,107],$VT=[2,5,10,18,28,29,30,33,34,35,36,40,41,42,44,45,46,59,64,65,74,80,81,82,83,85,88,90],$VU=[1,90],$VV=[10,13,31,32,36,39,53,54,55,56,57,58,62,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VW=[2,106],$VX=[1,124],$VY=[1,142],$VZ=[10,13,31,32,36,39,53,54,55,56,57,58,62,66,67,68,69],$V_=[10,13,31,32,36,39,53,54,55,56,57,58,62,66,67,68,69,70,71,72,73],$V$=[10,13,31,32,36,39,53,54,55,56,57,58,62,66,67,68,69,70,71,72,73,74,75],$V01=[10,13,31,32,36,39,53,54,55,56,57,58,62,66,67,68,69,70,71,72,73,74,75,76,77,78],$V11=[10,13,31,32,36,39,62],$V21=[1,151],$V31=[1,152],$V41=[1,153],$V51=[1,154],$V61=[1,163],$V71=[1,166],$V81=[39,62],$V91=[10,13,31,32,36,37,39,51,52,53,54,55,56,57,58,62,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86],$Va1=[2,5,10,18,28,29,30,33,34,35,36,40,41,42,44,45,46,48,59,64,65,74,80,81,82,83,85,88,90],$Vb1=[2,10,28,29,30,33,34,35,36,40,41,42,44,45,46,64,65,74,80,81,82,83,85,88,90],$Vc1=[13,37],$Vd1=[1,189],$Ve1=[10,36],$Vf1=[10,44,45],$Vg1=[51,52,53,54,55,56,57,58,66,67,68,69,70,71,72,73,74,75,76,77,78,79];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"InstruccionesSentencia":7,"{":8,"LInstruccionSentencia":9,"}":10,"InstruccionSentencia":11,"Declaracion":12,";":13,"Declaracion_type":14,"Expresion":15,"Asignacion":16,"Sentencias_control":17,"Funcion":18,"Sentencia_if":19,"Sentenciabreak":20,"Sentenciacontinue":21,"Sentenciadowhile":22,"Sentenciafor":23,"SentenciaReturn":24,"Sentenciaswitch":25,"SentenciaTernaria":26,"Sentenciawhile":27,"CONTINUE":28,"BREAK":29,"RETURN":30,"?":31,":":32,"FOR":33,"(":34,"LET":35,"IDENTIFICADOR":36,"=":37,"Aumento":38,")":39,"DO":40,"WHILE":41,"SWITCH":42,"Casos":43,"CASE":44,"DEFAULT":45,"IF":46,"Sentenciaelse":47,"ELSE":48,"Listaatributos":49,"Lvalorestype":50,"++":51,"--":52,"+=":53,"-=":54,"*=":55,"/=":56,"%=":57,"**=":58,"TYPE":59,"Latributostype":60,"TipoatributosType":61,",":62,"Tipo":63,"CONST":64,"!":65,"&&":66,"||":67,"==":68,"!=":69,"<":70,">":71,"<=":72,">=":73,"-":74,"+":75,"*":76,"/":77,"%":78,"**":79,"NUMERO":80,"CADENA":81,"TRUE":82,"FALSE":83,"Llamada":84,"NULL":85,".":86,"Listaparam":87,"CONSOLE":88,"LOG":89,"GRAFICAR_TS":90,"STRING":91,"NUMBER":92,"BOOLEAN":93,"VOID":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",10:"}",13:";",18:"Funcion",28:"CONTINUE",29:"BREAK",30:"RETURN",31:"?",32:":",33:"FOR",34:"(",35:"LET",36:"IDENTIFICADOR",37:"=",39:")",40:"DO",41:"WHILE",42:"SWITCH",44:"CASE",45:"DEFAULT",46:"IF",48:"ELSE",51:"++",52:"--",53:"+=",54:"-=",55:"*=",56:"/=",57:"%=",58:"**=",59:"TYPE",61:"TipoatributosType",62:",",64:"CONST",65:"!",66:"&&",67:"||",68:"==",69:"!=",70:"<",71:">",72:"<=",73:">=",74:"-",75:"+",76:"*",77:"/",78:"%",79:"**",80:"NUMERO",81:"CADENA",82:"TRUE",83:"FALSE",85:"NULL",86:".",88:"CONSOLE",89:"LOG",90:"GRAFICAR_TS",91:"STRING",92:"NUMBER",93:"BOOLEAN",94:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[9,2],[9,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[11,2],[11,2],[11,1],[11,1],[11,2],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[21,2],[20,2],[24,2],[24,3],[26,6],[23,12],[23,11],[22,7],[27,5],[25,7],[25,6],[43,5],[43,4],[43,4],[43,3],[43,4],[43,3],[43,2],[43,3],[19,5],[19,6],[47,2],[47,2],[16,5],[16,7],[16,6],[16,4],[38,2],[38,2],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[14,6],[60,5],[60,5],[60,4],[60,4],[60,4],[60,3],[12,6],[12,4],[12,8],[12,6],[12,4],[12,6],[12,4],[12,8],[12,6],[50,5],[50,4],[50,4],[50,3],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,1],[15,1],[15,1],[49,3],[49,2],[84,3],[84,4],[84,5],[84,6],[84,3],[87,3],[87,1],[63,1],[63,1],[63,1],[63,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        
        this.$ = {
            nodo : new Nodo("INICIO")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        //$$[$0-1].nodo.addPadre(this.$.nodo)
        return this.$;
    
break;
case 2:

        this.$ = {
            nodo : new Nodo("INST")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 3:

        this.$ = {
            nodo : new Nodo("INST")
        };
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 4: case 8: case 9: case 10: case 15: case 16: case 100:

        this.$ = $$[$0-1];
    
break;
case 5:

        this.$ = {
            nodo : null
        };
    
break;
case 6:

        this.$ = {
            nodo : new Nodo("Inst")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 7:

        this.$ = {
            nodo : new Nodo("Inst")
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 11: case 12: case 13: case 17: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 107: case 108:

        this.$ = $$[$0];
    
break;
case 18: case 27:

        this.$ = $$[$0]
    
break;
case 29:

        this.$ = {
            nodo : new Nodo("Continue")
        }
    
break;
case 30:

        this.$ = {
            nodo : new Nodo("Break")
        }
    
break;
case 31:

        this.$ = {
            nodo : new Nodo("Return")
        }
    
break;
case 32:

        this.$ = {
            nodo : new Nodo("Return")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 33:

        this.$ = {
            nodo : new Nodo("Ternario")
        }
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-5].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        this.$.nodo.agregarHijo($$[$0-3].nodo);
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 34:

        this.$ = {
            nodo : new Nodo("For")
        };
        auxnodo = new Nodo('=');
        auxnodo.agregarHijo(new Nodo($$[$0-8]));
        auxnodo.agregarHijo($$[$0-6].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-4].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        if($$[$0].nodo != null){
            this.$.nodo.agregarHijo($$[$0].nodo)
        }
    
break;
case 35:

        this.$ = {
            nodo : new Nodo("For")
        }
        auxnodo = new Nodo('=');
        auxnodo.agregarHijo(new Nodo($$[$0-8]))
        auxnodo.agregarHijo($$[$0-6].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-4].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        if($$[$0].nodo != null){
            this.$.nodo.agregarHijo($$[$0].nodo);
        }
    
break;
case 36:

        this.$ = {
            nodo : new Nodo("Do_while")
        }
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0-5].nodo);
        }
        auxnodo = new Nodo("Condicion")
        auxnodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo(auxnodo);
    
break;
case 37:

        this.$ = {
            nodo : new Nodo("While")
        }
        auxnodo = new Nodo("Condicion")
        auxnodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0].nodo);
        }
    
break;
case 38:

        this.$ = {
            nodo : new Nodo("Switch") 
        }
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-4].nodo)
        this.$.nodo.agregarHijo(auxnodo);
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 39:

        this.$ = {
            nodo : new Nodo("Switch")
        }
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-3].nodo)
        this.$.nodo.agregarHijo(auxnodo)
    
break;
case 40:

        this.$ = {
            nodo : new Nodo("Caso")
        };
        this.$.nodo.agregarHijo($$[$0-4].nodo)
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 41:

        this.$ = {
            nodo : new Nodo("Caso")
        }
        this.$.nodo.agregarHijo($$[$0-3].nodo)
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 42:

        this.$ = {
            nodo : new Nodo("Caso")
        };
        this.$.nodo.agregarHijo($$[$0-3].nodo)
        this.$.nodo.agregarHijo(new Nodo("Default"))
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 43:

        this.$ = {
            nodo : new Nodo("Caso")
        };
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        this.$.nodo.agregarHijo(new Nodo("Default"))
    
break;
case 44:

        this.$ = {
            nodo : new Nodo("Caso")
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 45:

        this.$ = {
            nodo : new Nodo("Caso")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 46:

        this.$ = {
            nodo : new Nodo("Caso") 
        }
        this.$.nodo.agregarHijo(new Nodo("Default"));
    
break;
case 47:

        this.$ = {
            nodo : new Nodo("Caso")
        }
        this.$.nodo.agregarHijo(new Nodo("Default"))
        this.$.nodo.agregarHijo($$[$0])
    
break;
case 48:

        this.$ = {
            nodo : new Nodo("IF")
        };
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0].nodo)
        };
    
break;
case 49:

        this.$ = {
            nodo : new Nodo("IF")
        }
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-3].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0-1].nodo)
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 50:

        this.$ = {
            nodo : new Nodo("ELSE")
        }
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 51:

        this.$ = {
            nodo : new Nodo("ELSE")
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0].nodo)
        }
    
break;
case 52:

        this.$ = {
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo($$[$0-3].nodo)
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 53:

        this.$ = {
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-6]))
        this.$.nodo.agregarHijo($$[$0-5].nodo)
        this.$.nodo.agregarHijo($$[$0-2].nodo)
    
break;
case 54:

        this.$ = {
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-5]));
        this.$.nodo.agregarHijo($$[$0-2].nodo)
    
break;
case 55:

        this.$ = {
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 56:

        this.$ = {
            nodo : new Nodo("Incremento")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        this.$.nodo.agregarHijo(new Nodo('++'));
        
    
break;
case 57:

        this.$ = {
            nodo : new Nodo("Incremento")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        this.$.nodo.agregarHijo(new Nodo('--'));
    
break;
case 58:

        this.$ = {
            nodo : new Nodo("+=")
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 59:

        this.$ = {
            nodo : new Nodo("-=")
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 60:

        this.$ = {
            nodo : new Nodo("*=")
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 61:

        this.$ = {
            nodo : new Nodo("/=")
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 62:

        this.$ = {
            nodo : new Nodo('%=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 63:

        this.$ = {
            nodo : new Nodo('**=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 64:

        this.$ = {
            nodo : new Nodo("DECLARACION_TYPE")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 65:

        this.$ = {
            nodo : new Nodo("Valor")
        };
        this.$.nodo.agregarHijo($$[$0-4].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]))
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 66:

        this.$ = {
            nodo : new Nodo("Valor")
        }
        this.$.nodo.agregarHijo($$[$0-4].nodo)
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]))
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 67:

        this.$ = {
            nodo : new Nodo("Valor")
        };
        this.$.nodo.agregarHijo($$[$0-3].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 68:

        this.$ = {
            nodo : new Nodo("Valor") 
        };
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 69:

        this.$ = {
            nodo : new Nodo("Valor")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 70:

        this.$ = {
            nodo : new Nodo("Valor")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]))
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 71:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo(Type[$$[$0-2]]));
        this.$.nodo.agregarHijo(new Nodo('='))
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 72:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo(Type[$$[$0]]));
    
break;
case 73:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-6]));
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 74:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 75:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo($$[$0-1]));
    
break;
case 76:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo(Type[$$[$0-2]]))
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 77:

        this.$ = {
            nodo : new Nodo("Declaracion")
        };
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 78:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-6])) ;
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 79:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo(new Nodo($$[$0]));
    
break;
case 80:

        this.$ = {
            nodo : new Nodo("Valores")
        }
        this.$.nodo.agregarHijo($$[$0-4].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]))
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 81:

        this.$ = { 
            nodo : new Nodo("Valores")
        };
        this.$.nodo.agregarHijo($$[$0-3].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 82:

        this.$ = {
            nodo : new Nodo("Valores")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 83:

        this.$ = {
            nodo : new Nodo("Valores")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 84:

        this.$ = {
            nodo : new Nodo('!')
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 85:

        this.$ = {
            nodo : new Nodo('&&')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 86:

        this.$ = {
            nodo : new Nodo('||') 
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 87:

        this.$ = {
            nodo : new Nodo ('==')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 88:

        this.$ = {
            nodo : new Nodo('!=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 89:

        this.$ = {
            nodo : new Nodo('<')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 90:

        this.$ = {
            nodo : new Nodo('>')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 91:

        this.$ = {
            nodo : new Nodo('<=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 92:

        this.$ = {
            nodo : new Nodo('>=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 93:

        this.$ = {
            nodo : new Nodo('-')
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 94:

        this.$ = {
            nodo : new Nodo('+')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 95:

        this.$ = {
            nodo : new Nodo('-')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 96:

        this.$ = {
            nodo : new Nodo('*')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 97:

        this.$ = {
            nodo : new Nodo('/')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 98:

        this.$ = {
            nodo : new Nodo('%')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 99:

        this.$ = {
            nodo : new Nodo('**')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 101: case 103: case 104: case 105: case 109:

        this.$ = {
            nodo : new Nodo($$[$0])
        }
    
break;
case 102:

        if($$[$0].includes('\"'))
        {
            this.$ = {
                nodo : new Nodo($$[$0].replace(/['"]+/g, ''))
            }
        }
        else if($$[$0].includes("'"))
        {
            this.$ = {
                nodo : new Nodo($$[$0].replace(/["'"]+/g, ''))
            }
        }
        else
        {
            this.$ = {
                nodo : new Nodo($$[$0])
            }
        }
    
break;
case 106:

        this.$ = {
            nodo : new Nodo('EXP')
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-1]));
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 110:

        this.$ = {
            nodo : new Nodo('ATRIB')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0]))
        this.$ = $$[$0-2];
    
break;
case 111:

        this.$ = {
            nodo : new Nodo('ATRIB')
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0]));
    
break;
case 112:

        this.$ = {
            nodo : new Nodo('Llamada')
        };
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
    
break;
case 113:

        this.$ = {
            nodo : new Nodo("Llamada")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 114:

        this.$ = {
            nodo : new Nodo("Imprimir")
        }
    
break;
case 115:

        this.$ = {
            nodo : new Nodo("Imprimir")

        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 116:

        this.$ = {
            nodo : new Nodo("GraficarTs")
        }
    
break;
case 117:

        this.$ = {
            nodo : new Nodo("Parametro")
        };
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 118:

        this.$ = {
            nodo : new Nodo("Parametro")
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 119:

        this.$ = Type.CADENA;
    
break;
case 120:

        this.$ = Type.NUMERO;
    
break;
case 121:

        this.$ = Type.BOOLEANO
    
break;
case 122:

        this.$ = Type.VOID;
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,12:4,14:5,15:6,16:7,17:8,18:$V1,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,28:$V2,29:$V3,30:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:22,40:$V9,41:$Va,42:$Vb,46:$Vc,59:$Vd,64:$Ve,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{1:[3]},{2:$V0,5:[1,44],6:45,12:4,14:5,15:6,16:7,17:8,18:$V1,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,28:$V2,29:$V3,30:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:22,40:$V9,41:$Va,42:$Vb,46:$Vc,59:$Vd,64:$Ve,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},o($Vo,[2,3]),{13:[1,46]},{13:[1,47]},{13:[1,48],31:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),{13:[1,72]},{36:[1,73]},{36:[1,74]},{36:[1,75]},{15:76,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:78,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:79,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},o($VN,[2,101]),o($VN,[2,102]),o($VN,[2,103]),o($VN,[2,104]),o($VO,$VP,{49:80,34:$VQ,37:[1,81],86:$VR}),o($VN,$VS),o($VN,[2,108]),o($VN,[2,109]),o($VT,[2,20]),o($VT,[2,21]),o($VT,[2,22]),o($VT,[2,23]),o($VT,[2,24]),o($VT,[2,25]),o($VT,[2,26]),o($VT,[2,27]),o($VT,[2,28]),{86:[1,84]},{34:[1,85]},{34:[1,86]},{13:[1,87]},{13:[1,88]},{7:89,8:$VU},{34:[1,91]},{13:[1,92],15:93,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{34:[1,94]},{34:[1,95]},{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),{15:96,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:97,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:98,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:99,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:100,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:101,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:102,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:103,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:104,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:105,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:106,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:107,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:108,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:109,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},o($VN,[2,56]),o($VN,[2,57]),{15:110,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:111,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:112,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:113,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:114,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:115,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:116,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},o($Vo,[2,14]),{32:[1,117]},{32:[1,118],37:[1,119]},{37:[1,120]},o($VV,[2,84],{51:$Vq,52:$Vr}),o($VN,$VP,{49:121,34:$VQ,86:$VR}),o($VV,[2,93],{51:$Vq,52:$Vr}),{39:[1,122],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($VO,$VW,{37:[1,123],86:$VX}),{8:[1,125],15:126,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:129,34:$V6,36:$VM,38:22,39:[1,127],65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,87:128,88:$Vm,90:$Vn},{36:[1,130]},{89:[1,131]},{39:[1,132]},{15:133,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},o($VT,[2,30]),o($VT,[2,29]),{41:[1,134]},{2:$VY,9:135,10:[1,136],11:137,12:138,15:139,16:140,17:141,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,28:$V2,29:$V3,30:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:22,40:$V9,41:$Va,42:$Vb,46:$Vc,64:$Ve,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{35:[1,143],36:[1,144]},o($VT,[2,31]),{13:[1,145],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{15:146,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:147,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},o([10,13,31,32,36,39,53,54,55,56,57,58,62,66,67],[2,85],{51:$Vq,52:$Vr,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o([10,13,31,32,36,39,53,54,55,56,57,58,62,67],[2,86],{51:$Vq,52:$Vr,66:$Vy,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($VZ,[2,87],{51:$Vq,52:$Vr,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($VZ,[2,88],{51:$Vq,52:$Vr,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V_,[2,89],{51:$Vq,52:$Vr,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V_,[2,90],{51:$Vq,52:$Vr,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V_,[2,91],{51:$Vq,52:$Vr,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V_,[2,92],{51:$Vq,52:$Vr,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V$,[2,94],{51:$Vq,52:$Vr,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V$,[2,95],{51:$Vq,52:$Vr,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V01,[2,96],{51:$Vq,52:$Vr,79:$VL}),o($V01,[2,97],{51:$Vq,52:$Vr,79:$VL}),o($V01,[2,98],{51:$Vq,52:$Vr,79:$VL}),o($VV,[2,99],{51:$Vq,52:$Vr}),o($V11,[2,58],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V11,[2,59],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V11,[2,60],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V11,[2,61],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V11,[2,62],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V11,[2,63],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),{32:[1,148],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{36:[1,150],63:149,91:$V21,92:$V31,93:$V41,94:$V51},{36:[1,156],63:155,91:$V21,92:$V31,93:$V41,94:$V51},{15:157,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{8:[1,158]},o($VN,$VW,{86:$VX}),o($VN,[2,100]),{8:[1,160],15:159,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{36:[1,161]},{36:$V61,50:162},{13:[1,164],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($VN,[2,112]),{39:[1,165],62:$V71},o($V81,[2,118],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V91,[2,111]),{34:[1,167]},o($VN,[2,116]),{39:[1,168],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{34:[1,169]},{2:$VY,10:[1,170],11:171,12:138,15:139,16:140,17:141,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,28:$V2,29:$V3,30:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:22,40:$V9,41:$Va,42:$Vb,46:$Vc,64:$Ve,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},o($Va1,[2,5]),o($Vb1,[2,7]),{13:[1,172]},{13:[1,173],31:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($Vb1,[2,17]),o($Vb1,[2,18]),{13:[1,174]},{36:[1,175]},{37:[1,176]},o($VT,[2,32]),{39:[1,177],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{39:[1,178],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{15:179,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{13:[2,72],37:[1,180]},{13:[2,75],37:[1,181]},o($Vc1,[2,119]),o($Vc1,[2,120]),o($Vc1,[2,121]),o($Vc1,[2,122]),{37:[1,182]},{37:[1,183]},{13:[2,77],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{36:[1,185],60:184},{13:[1,186],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{36:$V61,50:187},o($V91,[2,110]),{10:[1,188],36:$Vd1},{32:[1,190]},o($VT,[2,55]),o($VN,[2,113]),{15:191,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:129,34:$V6,36:$VM,38:22,39:[1,192],65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,87:193,88:$Vm,90:$Vn},{7:194,8:$VU},{15:195,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},o($Va1,[2,4]),o($Vb1,[2,6]),o($Vb1,[2,15]),o($Vb1,[2,16]),o($Vb1,[2,19]),{37:[1,196]},{15:197,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{8:[1,198]},{7:199,8:$VU},{13:[1,200],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{15:201,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{8:[1,202],15:203,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{15:204,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{8:[1,205],36:[1,206]},{10:[1,207],36:[1,208]},{32:[1,209]},o($VT,[2,52]),{10:[1,210],36:$Vd1},{13:[1,211]},{32:[1,212]},{15:213,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},o($V81,[2,117],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($VN,[2,114]),{39:[1,214],62:$V71},o($VT,[2,48],{47:215,48:[1,216]}),{39:[1,217],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{15:218,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{13:[1,219],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{10:[1,221],43:220,44:[1,222],45:[1,223]},o($VT,[2,37]),o($VT,[2,33]),{13:[2,71],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{36:$V61,50:224},{13:[2,74],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{13:[2,76],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{36:$V61,50:225},{13:[2,79]},{13:[2,64]},{32:[1,226]},{61:[1,227]},{13:[1,228]},o($VT,[2,54]),{15:229,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},o($Ve1,[2,83],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,62:[1,230],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($VN,[2,115]),o($VT,[2,49]),{7:232,8:$VU,19:231,46:$Vc},{13:[1,233]},{13:[1,234],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{15:235,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{10:[1,236],44:[1,237],45:[1,238]},o($VT,[2,39]),{15:239,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{32:[1,240]},{10:[1,241],36:$Vd1},{10:[1,242],36:$Vd1},{61:[1,243]},o($Ve1,[2,70],{13:[1,245],62:[1,244]}),o($VT,[2,53]),o($Ve1,[2,81],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,62:[1,246],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($Ve1,[2,82]),o($VT,[2,50]),o($VT,[2,51]),o($VT,[2,36]),{15:247,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{13:[1,248],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($VT,[2,38]),{15:249,34:$V6,36:$VM,38:22,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{32:[1,250]},{32:[1,251],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($Vf1,[2,46],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,11:137,12:138,15:139,16:140,17:141,9:252,2:$VY,28:$V2,29:$V3,30:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:$V9,41:$Va,42:$Vb,46:$Vc,64:$Ve,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,85:$Vl,88:$Vm,90:$Vn}),{13:[2,73]},{13:[2,78]},o($Ve1,[2,67],{13:[1,254],62:[1,253]}),o($Ve1,[2,68]),o($Ve1,[2,69]),o($Ve1,[2,80]),{13:[1,255],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{15:257,34:$V6,36:$VM,38:256,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},{32:[1,258],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($Vf1,[2,43],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,11:137,12:138,15:139,16:140,17:141,9:259,2:$VY,28:$V2,29:$V3,30:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:$V9,41:$Va,42:$Vb,46:$Vc,64:$Ve,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,85:$Vl,88:$Vm,90:$Vn}),o($Vf1,[2,45],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,11:137,12:138,15:139,16:140,17:141,9:260,2:$VY,28:$V2,29:$V3,30:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:$V9,41:$Va,42:$Vb,46:$Vc,64:$Ve,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,85:$Vl,88:$Vm,90:$Vn}),o($Vf1,[2,47],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,12:138,15:139,16:140,17:141,11:171,2:$VY,28:$V2,29:$V3,30:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:$V9,41:$Va,42:$Vb,46:$Vc,64:$Ve,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,85:$Vl,88:$Vm,90:$Vn}),o($Ve1,[2,65]),o($Ve1,[2,66]),{15:257,34:$V6,36:$VM,38:261,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,84:23,85:$Vl,88:$Vm,90:$Vn},o($Vg1,$VS,{39:[1,262]}),{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($Vf1,[2,41],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,11:137,12:138,15:139,16:140,17:141,9:263,2:$VY,28:$V2,29:$V3,30:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:$V9,41:$Va,42:$Vb,46:$Vc,64:$Ve,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,85:$Vl,88:$Vm,90:$Vn}),o($Vf1,[2,42],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,12:138,15:139,16:140,17:141,11:171,2:$VY,28:$V2,29:$V3,30:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:$V9,41:$Va,42:$Vb,46:$Vc,64:$Ve,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,85:$Vl,88:$Vm,90:$Vn}),o($Vf1,[2,44],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,12:138,15:139,16:140,17:141,11:171,2:$VY,28:$V2,29:$V3,30:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:$V9,41:$Va,42:$Vb,46:$Vc,64:$Ve,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,85:$Vl,88:$Vm,90:$Vn}),o($Vg1,$VS,{39:[1,264]}),{7:265,8:$VU},o($Vf1,[2,40],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,12:138,15:139,16:140,17:141,11:171,2:$VY,28:$V2,29:$V3,30:$V4,33:$V5,34:$V6,35:$V7,36:$V8,40:$V9,41:$Va,42:$Vb,46:$Vc,64:$Ve,65:$Vf,74:$Vg,80:$Vh,81:$Vi,82:$Vj,83:$Vk,85:$Vl,88:$Vm,90:$Vn}),{7:266,8:$VU},o($VT,[2,35]),o($VT,[2,34])],
defaultActions: {44:[2,1],206:[2,79],207:[2,64],241:[2,73],242:[2,78]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let auxnodo = null
    const { Nodo } = require('../Arbol/Nodo');
    const { Type } = require('../Retorno');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 80
break;
case 5:return 81
break;
case 6:return 35
break;
case 7:return 64
break;
case 8:return 91
break;
case 9:return 92
break;
case 10:return 93
break;
case 11:return 94
break;
case 12:return 59
break;
case 13:return 85
break;
case 14:return 82
break;
case 15:return 83
break;
case 16:return 46
break;
case 17:return 48
break;
case 18:return 42
break;
case 19:return 44
break;
case 20:return 41
break;
case 21:return 40
break;
case 22:return 33
break;
case 23:return 'IN'
break;
case 24:return 'OF'
break;
case 25:return 29
break;
case 26:return 28
break;
case 27:return 30
break;
case 28:return 'FUNCTION'
break;
case 29:return 88
break;
case 30:return 89
break;
case 31:return 90
break;
case 32:return 45
break;
case 33:return 51
break;
case 34:return 52
break;
case 35:return 53
break;
case 36:return 54
break;
case 37:return 55
break;
case 38:return 56
break;
case 39:return 57
break;
case 40:return 58
break;
case 41:return 32
break;
case 42:return 13
break;
case 43:return 66
break;
case 44:return 67
break;
case 45:return 68
break;
case 46:return 69
break;
case 47:return 65
break;
case 48:return 78
break;
case 49:return 79
break;
case 50:return 72
break;
case 51:return 73
break;
case 52:return 70
break;
case 53:return 71
break;
case 54:return 37
break;
case 55:return 75
break;
case 56:return 74
break;
case 57:return 76
break;
case 58:return 77
break;
case 59:return 86
break;
case 60:return 34
break;
case 61:return 39
break;
case 62:return 62
break;
case 63:return 8
break;
case 64:return 10
break;
case 65:return 31
break;
case 66:return '['
break;
case 67:return ']'
break;
case 68:return 36;
break;
case 69:return 5;
break;
case 70: 
                            console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
                            errores.push(new _Error(yy_.yylloc.first_line, yy_.yylloc.first_column, "Lexico", "El simbolo: " + yy_.yytext + " no pertenece al lenguaje"))
                        
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(("[^\"]*")|(`[^"`"]*`)|('[^"'"]*')))/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:default\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\*\*=)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:\*\*)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}