/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,39],$V2=[1,38],$V3=[1,42],$V4=[1,41],$V5=[1,16],$V6=[1,11],$V7=[1,21],$V8=[1,40],$V9=[1,44],$Va=[1,43],$Vb=[1,37],$Vc=[1,13],$Vd=[1,12],$Ve=[1,14],$Vf=[1,15],$Vg=[1,17],$Vh=[1,18],$Vi=[1,19],$Vj=[1,20],$Vk=[1,24],$Vl=[1,35],$Vm=[1,36],$Vn=[1,34],$Vo=[2,5,28,29,30,33,34,35,36,40,41,42,46,59,64,65,74,80,81,82,83,85,88,90,95],$Vp=[1,72],$Vq=[1,64],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,71],$Vy=[1,50],$Vz=[1,51],$VA=[1,52],$VB=[1,53],$VC=[1,54],$VD=[1,55],$VE=[1,56],$VF=[1,57],$VG=[1,59],$VH=[1,58],$VI=[1,60],$VJ=[1,61],$VK=[1,62],$VL=[1,63],$VM=[1,78],$VN=[10,13,31,32,36,39,51,52,53,54,55,56,57,58,62,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VO=[13,31,51,52,53,54,55,56,57,58,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VP=[2,105],$VQ=[1,83],$VR=[1,84],$VS=[2,107],$VT=[2,5,10,28,29,30,33,34,35,36,40,41,42,44,45,46,59,64,65,74,80,81,82,83,85,88,90,95],$VU=[1,92],$VV=[10,13,31,32,36,39,53,54,55,56,57,58,62,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VW=[2,106],$VX=[1,126],$VY=[1,145],$VZ=[10,13,31,32,36,39,53,54,55,56,57,58,62,66,67,68,69],$V_=[10,13,31,32,36,39,53,54,55,56,57,58,62,66,67,68,69,70,71,72,73],$V$=[10,13,31,32,36,39,53,54,55,56,57,58,62,66,67,68,69,70,71,72,73,74,75],$V01=[10,13,31,32,36,39,53,54,55,56,57,58,62,66,67,68,69,70,71,72,73,74,75,76,77,78],$V11=[10,13,31,32,36,39,62],$V21=[1,154],$V31=[1,155],$V41=[1,156],$V51=[1,157],$V61=[1,166],$V71=[1,169],$V81=[39,62],$V91=[10,13,31,32,36,37,39,51,52,53,54,55,56,57,58,62,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86],$Va1=[1,174],$Vb1=[2,5,10,28,29,30,33,34,35,36,40,41,42,44,45,46,48,59,64,65,74,80,81,82,83,85,88,90,95],$Vc1=[2,10,28,29,30,33,34,35,36,40,41,42,44,45,46,64,65,74,80,81,82,83,85,88,90],$Vd1=[8,13,37,39,62],$Ve1=[1,197],$Vf1=[1,230],$Vg1=[10,36],$Vh1=[1,253],$Vi1=[1,287],$Vj1=[1,306],$Vk1=[1,305],$Vl1=[1,307],$Vm1=[1,304],$Vn1=[1,296],$Vo1=[1,277],$Vp1=[1,292],$Vq1=[1,303],$Vr1=[1,302],$Vs1=[1,301],$Vt1=[1,300],$Vu1=[1,278],$Vv1=[1,288],$Vw1=[1,289],$Vx1=[1,290],$Vy1=[1,291],$Vz1=[1,293],$VA1=[1,294],$VB1=[1,295],$VC1=[1,298],$VD1=[1,299],$VE1=[10,44,45],$VF1=[1,334],$VG1=[1,320],$VH1=[1,321],$VI1=[1,322],$VJ1=[1,323],$VK1=[1,324],$VL1=[1,325],$VM1=[1,326],$VN1=[1,327],$VO1=[1,329],$VP1=[1,328],$VQ1=[1,330],$VR1=[1,331],$VS1=[1,332],$VT1=[1,333],$VU1=[10,13,31,32,36,37,39,62,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VV1=[1,354],$VW1=[1,401],$VX1=[51,52,53,54,55,56,57,58,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VY1=[10,13,31,32,36,37,39,62,66,67,68,69],$VZ1=[10,13,31,32,36,37,39,62,66,67,68,69,70,71,72,73],$V_1=[10,13,31,32,36,37,39,62,66,67,68,69,70,71,72,73,74,75],$V$1=[10,13,31,32,36,37,39,62,66,67,68,69,70,71,72,73,74,75,76,77,78],$V02=[1,431],$V12=[10,13,32,36,37,39,62],$V22=[1,481],$V32=[1,490],$V42=[1,491],$V52=[2,180];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"InstruccionesSentencia":7,"{":8,"LInstruccionSentencia":9,"}":10,"InstruccionSentencia":11,"Declaracion":12,";":13,"Declaracion_type":14,"Expresion":15,"Asignacion":16,"Sentencias_control":17,"Funcion":18,"Sentencia_if":19,"Sentenciabreak":20,"Sentenciacontinue":21,"Sentenciadowhile":22,"Sentenciafor":23,"SentenciaReturn":24,"Sentenciaswitch":25,"SentenciaTernaria":26,"Sentenciawhile":27,"CONTINUE":28,"BREAK":29,"RETURN":30,"?":31,":":32,"FOR":33,"(":34,"LET":35,"IDENTIFICADOR":36,"=":37,"Aumento":38,")":39,"DO":40,"WHILE":41,"SWITCH":42,"Casos":43,"CASE":44,"DEFAULT":45,"IF":46,"Sentenciaelse":47,"ELSE":48,"Listaatributos":49,"Lvalorestype":50,"++":51,"--":52,"+=":53,"-=":54,"*=":55,"/=":56,"%=":57,"**=":58,"TYPE":59,"Latributostype":60,"TipoatributosType":61,",":62,"Tipo":63,"CONST":64,"!":65,"&&":66,"||":67,"==":68,"!=":69,"<":70,">":71,"<=":72,">=":73,"-":74,"+":75,"*":76,"/":77,"%":78,"**":79,"NUMERO":80,"CADENA":81,"TRUE":82,"FALSE":83,"Llamada":84,"NULL":85,".":86,"Listaparam":87,"CONSOLE":88,"LOG":89,"GRAFICAR_TS":90,"STRING":91,"NUMBER":92,"BOOLEAN":93,"VOID":94,"FUNCTION":95,"Funcion1":96,"Lparametrosfuncion":97,"Tipofuncion":98,"InstruccionesFuncion":99,"InstruccionesFuncion1":100,"Linstrucciones":101,"Instruccionfuncion":102,"Linstrucciones1":103,"Expresionesfuncion":104,"Instruccionfuncion1":105,"Llamadas_funcion":106,"Auxdeclaracion":107,"Auxdeclaracion4":108,"sentencia_if":109,"sentencia_switch":110,"sentencia_while":111,"sentencia_dowhile":112,"sentencia_for":113,"sentencia_break":114,"sentencia_continue":115,"Sentencia_return":116,"Auxdeclaracion5":117,"Auxdeclaracion6":118,"Auxdeclaracion1":119,"Auxdeclaracion2":120,"Auxdeclaracion3":121,"ValoresType":122,"Sentencia_return1":123,"sentencia_for1":124,"Lcasosswitch":125,"Lcasos":126,"Lcasos1":127,"Lcasos2":128,"sentencia_else":129,"sentencia_else1":130,"instruccionfuncion12":131,"Atributos":132,"Instruccionfuncion2":133,"Aumento_funcion":134,"Parametrosllamada":135,"Atributo":136,"Atributos1":137,"Parametrollamada":138,"Parametrosllamada1":139,"Valortype":140,"ValoresType1":141,"Parametro":142,"Auxparametros":143,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",10:"}",13:";",28:"CONTINUE",29:"BREAK",30:"RETURN",31:"?",32:":",33:"FOR",34:"(",35:"LET",36:"IDENTIFICADOR",37:"=",39:")",40:"DO",41:"WHILE",42:"SWITCH",44:"CASE",45:"DEFAULT",46:"IF",48:"ELSE",51:"++",52:"--",53:"+=",54:"-=",55:"*=",56:"/=",57:"%=",58:"**=",59:"TYPE",61:"TipoatributosType",62:",",64:"CONST",65:"!",66:"&&",67:"||",68:"==",69:"!=",70:"<",71:">",72:"<=",73:">=",74:"-",75:"+",76:"*",77:"/",78:"%",79:"**",80:"NUMERO",81:"CADENA",82:"TRUE",83:"FALSE",85:"NULL",86:".",88:"CONSOLE",89:"LOG",90:"GRAFICAR_TS",91:"STRING",92:"NUMBER",93:"BOOLEAN",94:"VOID",95:"FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[9,2],[9,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[11,2],[11,2],[11,1],[11,1],[11,2],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[21,2],[20,2],[24,2],[24,3],[26,6],[23,12],[23,11],[22,7],[27,5],[25,7],[25,6],[43,5],[43,4],[43,4],[43,3],[43,4],[43,3],[43,2],[43,3],[19,5],[19,6],[47,2],[47,2],[16,5],[16,7],[16,6],[16,4],[38,2],[38,2],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[14,6],[60,5],[60,5],[60,4],[60,4],[60,4],[60,3],[12,6],[12,4],[12,8],[12,6],[12,4],[12,6],[12,4],[12,8],[12,6],[50,5],[50,4],[50,4],[50,3],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,1],[15,1],[15,1],[49,3],[49,2],[84,3],[84,4],[84,5],[84,6],[84,3],[87,3],[87,1],[63,1],[63,1],[63,1],[63,1],[18,4],[96,5],[96,4],[98,1],[98,1],[99,2],[100,2],[100,1],[101,2],[103,1],[103,0],[102,3],[102,2],[102,3],[102,3],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,2],[102,2],[108,2],[108,3],[117,4],[117,3],[107,2],[107,1],[107,3],[119,2],[119,2],[120,1],[120,3],[121,1],[121,2],[118,4],[118,2],[116,2],[123,2],[123,1],[114,2],[115,2],[113,3],[124,10],[124,9],[112,7],[111,5],[110,6],[125,2],[125,1],[126,4],[126,3],[127,2],[127,1],[127,0],[128,1],[128,0],[109,6],[129,2],[129,0],[130,1],[130,1],[105,2],[105,0],[131,1],[131,3],[104,2],[104,3],[104,3],[104,3],[104,3],[104,3],[104,3],[104,3],[104,3],[104,2],[104,3],[104,3],[104,3],[104,3],[104,3],[104,3],[104,5],[104,1],[104,1],[104,1],[104,2],[104,3],[104,1],[104,1],[104,1],[104,3],[104,1],[134,2],[134,2],[134,3],[134,3],[134,3],[134,3],[134,3],[134,3],[106,5],[106,3],[133,1],[133,2],[132,2],[136,2],[137,1],[137,0],[135,2],[138,1],[139,2],[139,0],[122,2],[140,3],[141,2],[141,1],[141,0],[97,2],[142,3],[142,3],[143,2],[143,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        
        this.$ = {
            nodo : new Nodo("INICIO")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        //$$[$0-1].nodo.addPadre(this.$.nodo)
        return this.$;
    
break;
case 2:

        this.$ = {
            nodo : new Nodo("INST")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 3:

        this.$ = {
            nodo : new Nodo("INST")
        };
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 4: case 8: case 9: case 10: case 15: case 16: case 100: case 129: case 174: case 217: case 230:

        this.$ = $$[$0-1];
    
break;
case 5:

        this.$ = {
            nodo : null
        };
    
break;
case 6:

        this.$ = {
            nodo : new Nodo("Inst")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 7:

        this.$ = {
            nodo : new Nodo("Inst")
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 11: case 12: case 13: case 17: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 107: case 108: case 131: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 148: case 155: case 156: case 160: case 181: case 186: case 187: case 188: case 218: case 231: case 235: case 239:

        this.$ = $$[$0];
    
break;
case 18: case 27: case 126: case 127: case 152: case 244:

        this.$ = $$[$0]
    
break;
case 29:

        this.$ = {
            nodo : new Nodo("Continue")
        }
    
break;
case 30:

        this.$ = {
            nodo : new Nodo("Break")
        }
    
break;
case 31:

        this.$ = {
            nodo : new Nodo("Return")
        }
    
break;
case 32:

        this.$ = {
            nodo : new Nodo("Return")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 33:

        this.$ = {
            nodo : new Nodo("Ternario")
        }
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-5].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        this.$.nodo.agregarHijo($$[$0-3].nodo);
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 34:

        this.$ = {
            nodo : new Nodo("For")
        };
        auxnodo = new Nodo('=');
        auxnodo.agregarHijo(new Nodo($$[$0-8]));
        auxnodo.agregarHijo($$[$0-6].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-4].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        if($$[$0].nodo != null){
            this.$.nodo.agregarHijo($$[$0].nodo)
        }
    
break;
case 35:

        this.$ = {
            nodo : new Nodo("For")
        }
        auxnodo = new Nodo('=');
        auxnodo.agregarHijo(new Nodo($$[$0-8]))
        auxnodo.agregarHijo($$[$0-6].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-4].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        if($$[$0].nodo != null){
            this.$.nodo.agregarHijo($$[$0].nodo);
        }
    
break;
case 36:

        this.$ = {
            nodo : new Nodo("Do_while")
        }
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0-5].nodo);
        }
        auxnodo = new Nodo("Condicion")
        auxnodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo(auxnodo);
    
break;
case 37:

        this.$ = {
            nodo : new Nodo("While")
        }
        auxnodo = new Nodo("Condicion")
        auxnodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0].nodo);
        }
    
break;
case 38:

        this.$ = {
            nodo : new Nodo("Switch") 
        }
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-4].nodo)
        this.$.nodo.agregarHijo(auxnodo);
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 39:

        this.$ = {
            nodo : new Nodo("Switch")
        }
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-3].nodo)
        this.$.nodo.agregarHijo(auxnodo)
    
break;
case 40:

        this.$ = {
            nodo : new Nodo("Caso")
        };
        this.$.nodo.agregarHijo($$[$0-4].nodo)
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 41:

        this.$ = {
            nodo : new Nodo("Caso")
        }
        this.$.nodo.agregarHijo($$[$0-3].nodo)
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 42:

        this.$ = {
            nodo : new Nodo("Caso")
        };
        this.$.nodo.agregarHijo($$[$0-3].nodo)
        this.$.nodo.agregarHijo(new Nodo("Default"))
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 43:

        this.$ = {
            nodo : new Nodo("Caso")
        };
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        this.$.nodo.agregarHijo(new Nodo("Default"))
    
break;
case 44:

        this.$ = {
            nodo : new Nodo("Caso")
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 45:

        this.$ = {
            nodo : new Nodo("Caso")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 46:

        this.$ = {
            nodo : new Nodo("Caso") 
        }
        this.$.nodo.agregarHijo(new Nodo("Default"));
    
break;
case 47:

        this.$ = {
            nodo : new Nodo("Caso")
        }
        this.$.nodo.agregarHijo(new Nodo("Default"))
        this.$.nodo.agregarHijo($$[$0])
    
break;
case 48:

        this.$ = {
            nodo : new Nodo("IF")
        };
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0].nodo)
        };
    
break;
case 49:

        this.$ = {
            nodo : new Nodo("IF")
        }
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-3].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0-1].nodo)
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 50:

        this.$ = {
            nodo : new Nodo("ELSE")
        }
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 51:

        this.$ = {
            nodo : new Nodo("ELSE")
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0].nodo)
        }
    
break;
case 52:

        this.$ = {
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo($$[$0-3].nodo)
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 53:

        this.$ = {
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-6]))
        this.$.nodo.agregarHijo($$[$0-5].nodo)
        this.$.nodo.agregarHijo($$[$0-2].nodo)
    
break;
case 54:

        this.$ = {
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-5]));
        this.$.nodo.agregarHijo($$[$0-2].nodo)
    
break;
case 55:

        this.$ = {
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 56:

        this.$ = {
            nodo : new Nodo("Incremento")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        this.$.nodo.agregarHijo(new Nodo('++'));
        
    
break;
case 57:

        this.$ = {
            nodo : new Nodo("Incremento")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        this.$.nodo.agregarHijo(new Nodo('--'));
    
break;
case 58:

        this.$ = {
            nodo : new Nodo("+=")
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 59:

        this.$ = {
            nodo : new Nodo("-=")
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 60:

        this.$ = {
            nodo : new Nodo("*=")
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 61:

        this.$ = {
            nodo : new Nodo("/=")
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 62:

        this.$ = {
            nodo : new Nodo('%=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 63:

        this.$ = {
            nodo : new Nodo('**=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 64:

        this.$ = {
            nodo : new Nodo("DECLARACION_TYPE")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 65:

        this.$ = {
            nodo : new Nodo("Valor")
        };
        this.$.nodo.agregarHijo($$[$0-4].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]))
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 66:

        this.$ = {
            nodo : new Nodo("Valor")
        }
        this.$.nodo.agregarHijo($$[$0-4].nodo)
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]))
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 67:

        this.$ = {
            nodo : new Nodo("Valor")
        };
        this.$.nodo.agregarHijo($$[$0-3].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 68:

        this.$ = {
            nodo : new Nodo("Valor") 
        };
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 69:

        this.$ = {
            nodo : new Nodo("Valor")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 70:

        this.$ = {
            nodo : new Nodo("Valor")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]))
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 71:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo(Type[$$[$0-2]]));
        this.$.nodo.agregarHijo(new Nodo('='))
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 72:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo(Type[$$[$0]]));
    
break;
case 73:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-6]));
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 74:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 75:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo($$[$0-1]));
    
break;
case 76:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo(Type[$$[$0-2]]))
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 77:

        this.$ = {
            nodo : new Nodo("Declaracion")
        };
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 78:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-6])) ;
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 79:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo(new Nodo($$[$0]));
    
break;
case 80:

        this.$ = {
            nodo : new Nodo("Valores")
        }
        this.$.nodo.agregarHijo($$[$0-4].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]))
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 81:

        this.$ = { 
            nodo : new Nodo("Valores")
        };
        this.$.nodo.agregarHijo($$[$0-3].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 82:

        this.$ = {
            nodo : new Nodo("Valores")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 83:

        this.$ = {
            nodo : new Nodo("Valores")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 84:

        this.$ = {
            nodo : new Nodo('!')
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 85:

        this.$ = {
            nodo : new Nodo('&&')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 86:

        this.$ = {
            nodo : new Nodo('||') 
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 87:

        this.$ = {
            nodo : new Nodo ('==')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 88:

        this.$ = {
            nodo : new Nodo('!=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 89:

        this.$ = {
            nodo : new Nodo('<')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 90:

        this.$ = {
            nodo : new Nodo('>')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 91:

        this.$ = {
            nodo : new Nodo('<=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 92:

        this.$ = {
            nodo : new Nodo('>=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 93:

        this.$ = {
            nodo : new Nodo('-')
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 94:

        this.$ = {
            nodo : new Nodo('+')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 95:

        this.$ = {
            nodo : new Nodo('-')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 96:

        this.$ = {
            nodo : new Nodo('*')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 97:

        this.$ = {
            nodo : new Nodo('/')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 98:

        this.$ = {
            nodo : new Nodo('%')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 99:

        this.$ = {
            nodo : new Nodo('**')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 101: case 103: case 104: case 105: case 109:

        this.$ = {
            nodo : new Nodo($$[$0])
        }
    
break;
case 102:

        if($$[$0].includes('\"'))
        {
            this.$ = {
                nodo : new Nodo($$[$0].replace(/['"]+/g, ''))
            }
        }
        else if($$[$0].includes("'"))
        {
            this.$ = {
                nodo : new Nodo($$[$0].replace(/["'"]+/g, ''))
            }
        }
        else
        {
            this.$ = {
                nodo : new Nodo($$[$0])
            }
        }
    
break;
case 106:

        this.$ = {
            nodo : new Nodo('EXP')
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-1]));
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 110:

        this.$ = {
            nodo : new Nodo('ATRIB')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0]))
        this.$ = $$[$0-2];
    
break;
case 111:

        this.$ = {
            nodo : new Nodo('ATRIB')
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0]));
    
break;
case 112:

        this.$ = {
            nodo : new Nodo('Llamada')
        };
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
    
break;
case 113:

        this.$ = {
            nodo : new Nodo("Llamada")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 114:

        this.$ = {
            nodo : new Nodo("Imprimir")
        }
    
break;
case 115:

        this.$ = {
            nodo : new Nodo("Imprimir")

        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 116:

        this.$ = {
            nodo : new Nodo("GraficarTs")
        }
    
break;
case 117:

        this.$ = {
            nodo : new Nodo("Parametro")
        };
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 118:

        this.$ = {
            nodo : new Nodo("Parametro")
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 119:

        this.$ = Type.CADENA;
    
break;
case 120:

        this.$ = Type.NUMERO;
    
break;
case 121:

        this.$ = Type.BOOLEANO
    
break;
case 122:

        this.$ = Type.VOID;
    
break;
case 123:

        if($$[$0].parametros != null)
        {
            this.$ = {
                //instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, $$[$0].parametros.instrucciones, $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos($$[$0].parametros.nodo);
            if(isNaN($$[$0].tipo) == false)
            {
                this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            }
            else
            {
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            }
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
        else
        {
            this.$ = {
                //instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, new Array(), $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
    
break;
case 124:

        this.$ = {
            parametros : $$[$0-4],
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 125:

        this.$ = {
            parametros : null,
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 128:

        if($$[$0].instrucciones != null)
        {
            this.$ = {
                //instrucciones : new Cuerposentencia($$[$0].instrucciones, _$[$0-1].linea, _$[$0-1].columna),
                nodo : $$[$0].nodo
            }
        }
        else
        {
            this.$ = $$[$0];
        }
    
break;
case 130:

        this.$ = {
            //instrucciones : null,
            nodo : null
        };
    
break;
case 132:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            //instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 2].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 133:

        hermano = eval('$$');
        this.$ = {
            //instrucciones : [hermano[hermano.length - 1].instrucciones],
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 134:

        if($$[$0-1].contenido.instrucciones != null)
        {
            if($$[$0-1].estype == false)
            {
                this.$ = {
                    //instrucciones : new Asignacion($$[$0-2].instrucciones.nombre, $$[$0-2].instrucciones.atributos, $$[$0-1].contenido.instrucciones, $$[$0-2].instrucciones.linea, $$[$0-2].instrucciones.columna),
                    nodo : new Nodo("Asignacion", null, null)
                }
                this.$.nodo.agregarHijos($$[$0-2].nodo);
                this.$.nodo.agregarHijos($$[$0-1].contenido.nodo)
            }
            else
            {
                this.$ = {
                    //instrucciones : new AsignacionVarType($$[$0-2].instrucciones.nombre, $$[$0-2].instrucciones.atributos, $$[$0-1].contenido.instrucciones, $$[$0-2].instrucciones.linea, $$[$0-2].instrucciones.columna),
                    nodo : new Nodo("Asignacion", null, null)
                }
                this.$.nodo.agregarHijos($$[$0-2].nodo)
                this.$.nodo.agregarHijos($$[$0-1].contenido.nodo)
            }
        }
        else
        {
            this.$ = $$[$0-2];
        }
    
break;
case 135:

        hermano = eval('$$');
        this.$ = hermano[hermano.length - 2];
    
break;
case 136:

        if($$[$0].estype == false){
            if($$[$0].valor == null && $$[$0].tipo == null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], null, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
            }
            else if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                if(isNaN($$[$0].tipo) == false)
                {
                    this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                }
                else
                {
                    this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
                }
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                if(isNaN($$[$0].tipo) == false)
                {
                    this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                }
                else
                {
                    this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
                }
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
            else if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo('=', null, null));
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
        else
        {
            if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
    
break;
case 137:

        if($$[$0].estype == false)
        {
            if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
            else
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                this.$.nodo.agregarHijos(new Nodo('=', null, null));
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
        else
        {
            this.$ = {
                //instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                nodo : new Nodo(null, "Declaracion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
            this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            this.$.nodo.agregarHijos(new Nodo('=', null, null))
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 149: case 154:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : null,
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 150:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 151:

        hermano = eval('$$');
        this.$ = $$[$0]
    
break;
case 153:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : null
        };
    
break;
case 157:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 158:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        };
    
break;
case 159:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 161:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 3].instrucciones,
            tipo : hermano[hermano.length - 6],
            nodo : hermano[hermano.length - 3].nodo
        }
    
break;
case 162:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 163:

        this.$ = {
            //instrucciones : new SentenciaReturn($$[$0].instrucciones, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Return", null, null)
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 164:

        hermano = eval('$$');
        this.$ = {
            //instrucciones : hermano[hermano.length - 2].instrucciones,
            nodo : hermano[hermano.length - 2].nodo
        };
    
break;
case 165: case 185:

        this.$ = {
            //instrucciones : null,
            nodo : null
        }
    
break;
case 166:

        this.$ = {
            //instrucciones : new Break(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Break", null, null)
        }
    
break;
case 167:

        this.$ = {
            //instrucciones : new Continue(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Continue", null, null)
        };
    
break;
case 168:

        this.$ = {
            //instrucciones : new SentenciaFor($$[$0].declarado, $$[$0].id, $$[$0].valor_inicio.instrucciones, $$[$0].condicion.instrucciones, $$[$0].incremento.instrucciones, $$[$0].instrucciones.instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null)
        instruccion.agregarHijos(new Nodo($$[$0].id, null, null))
        instruccion.agregarHijos($$[$0].valor_inicio.nodo)
        this.$.nodo.agregarHijos(instruccion);
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0].condicion.nodo)
        this.$.nodo.agregarHijos(instruccion)
        this.$.nodo.agregarHijos($$[$0].incremento.nodo)
        if($$[$0].instrucciones.nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].instrucciones.nodo)
        }
    
break;
case 169:

        this.$ = {
            id : $$[$0-8],
            valor_inicio : $$[$0-6],
            condicion : $$[$0-4],
            incremento : $$[$0-2],
            //instrucciones : $$[$0],
            declarado : 1
        }
    
break;
case 170:

        this.$ = {
            id : $$[$0-8],
            valor_inicio : $$[$0-6],
            condicion : $$[$0-4],
            incremento : $$[$0-2],
            //instrucciones : $$[$0],
            declarado : 0
        }
    
break;
case 171:

        this.$ = {
            //instrucciones : new SentenciaDowhile($$[$0-2].instrucciones, $$[$0-5].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Do_while", null)
        }
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-2].nodo)
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-5].nodo)
        }
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 172:

        this.$ = {
            //instrucciones : new SentenciaWhile($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "While", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].nodo != null){
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 173:

        this.$ = {
            //instrucciones : new SentenciaSwitch($$[$0-3].instrucciones, $$[$0].casos, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Switch", null)
        };
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].casos != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo_casos)
        }
    
break;
case 175:

        this.$ = {
            casos : null,
            nodo_casos : null
        };
    
break;
case 176:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = {
                casos : [new Caso($$[$0-2].instrucciones, hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos($$[$0-2].nodo)
            if(hermano[hermano.length - 1].instrucciones != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new Caso($$[$0-2].instrucciones, hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column))
            this.$ = {
                casos : hermano[hermano.length - 1].casos,
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos($$[$0-2].nodo);
            if(hermano[hermano.length - 1].nodo != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }            
            this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo_casos)
        }
    
break;
case 177:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = {
                casos : [new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos(new Nodo("Default", null, null));
            if(hermano[hermano.length - 1].instrucciones != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column));
            this.$ = {
                casos : hermano[hermano.length - 1].casos,
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos(new Nodo("Default", null, null))
            if(hermano[hermano.length - 1].nodo != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
            this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo_casos)
        }
    
break;
case 178:

        hermano = eval('$$')
        if(hermano[hermano.length - 1] == null)
        {
            this.$ = {
                //instrucciones : hermano[hermano.length - 2].instrucciones,
                casos : null,
                nodo : hermano[hermano.length - 2].nodo,
                nodo_casos : null
            }
        }
        else
        {
            this.$ = {
                //instrucciones : hermano[hermano.length - 2].instrucciones,
                casos : hermano[hermano.length - 1].casos,
                nodo : hermano[hermano.length - 2].nodo,
                nodo_casos : hermano[hermano.length - 1].nodo_casos
            }
        }
        
    
break;
case 179:

        hermano = eval('$$');
        this.$ = {
            //instrucciones : null,
            casos : hermano[hermano.length - 1].casos,
            nodo : null,
            nodo_casos : hermano[hermano.length - 1].nodo_casos
        }
    
break;
case 180:

        this.$ = {
            //instrucciones : null,
            casos : null,
            nodo : null,
            nodo_casos : null
        }
    
break;
case 182:

        this.$ = null
    
break;
case 183:

        this.$ = {
            //instrucciones : new SentenciaIf($$[$0-3].instrucciones, $$[$0-1].instrucciones, $$[$0].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "IF", null)
        };
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-1].nodo)
        }

        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 184:

        this.$ = {
            //instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 189:

        this.$ = {
            contenido : {
                //instrucciones : null
            }
            ,
            nodo : null
        };
    
break;
case 190:

        this.$ = {
            contenido : $$[$0],
            estype : false
        }
    
break;
case 191:

        this.$ = {
            contenido : $$[$0-1],
            estype : true
        }
    
break;
case 192:

        this.$ = {
            //instrucciones : new Relacional($$[$0].instrucciones, null, OperacionesLogicas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('!', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 193:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.'&&', _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('&&', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 194:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('||', null, null) 
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 195:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo ('==', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 196:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('!=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 197:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MENOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 198:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 199:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 200:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 201:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0].instrucciones, null, OpcionesAritmeticas.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 202:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('+', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 203:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 204:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('*', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 205:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.DIV, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('/', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 206:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 207:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**', null, null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 208:

        this.$ = {
            //instrucciones : new SentenciaTernaria($$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Ternaria", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 209:

        this.$ = {
            //instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 210:

        if($$[$0].includes('\"'))
        {
            this.$ = {
                //instrucciones : new Literal($$[$0].replace(/['"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/['"]+/g, ''), null, null)
            }
        }
        else if($$[$0].includes("'"))
        {
            this.$ = {
                //instrucciones : new Literal($$[$0].replace(/["'"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/["'"]+/g, ''), null, null)
            }
        }
        else
        {
            this.$ = {
                //instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0], null, null)
            }
        }
    
break;
case 211:

        this.$ = {
            //instrucciones : new Variable($$[$0], null, 7, _$[$0].first_line, _$[$0].first_column),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 212:

        this.$ = {
            nodo : new Nodo(null, 'EXP', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 213:

        hermano = eval('$$');
        this.$ = {
            nodo : new Nodo(null, "Llamada", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        if(hermano[hermano.length - 1].nodo != null)
        {
            this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        }
    
break;
case 214: case 215: case 216:

        this.$ = {
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 219:

        this.$ = {
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('++', null, null));
        
    
break;
case 220:

        this.$ = {
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('--', null, null));
    
break;
case 221:

        this.$ = {
            nodo : new Nodo("+=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 222:

        this.$ = {
            nodo : new Nodo("-=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 223:

        this.$ = {
            nodo : new Nodo("*=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 224:

        this.$ = {
            nodo : new Nodo("/=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 225:

        this.$ = {
            nodo : new Nodo('%=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 226:

        this.$ = {
            nodo : new Nodo('**=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 227:

        hermano = eval('$$');
        this.$ = {
            nodo : new Nodo(null, "Imprimir", null)
        }
        if(hermano[hermano.length - 1].nodo != null)
        {
            this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        }
    
break;
case 228:

        this.$ = {
            nodo : new Nodo(null, "GraficarTs", null)
        }
    
break;
case 229:

        hermano = eval('$$');
        this.$ = {
            nodo : null
        };
    
break;
case 232:

        this.$ = {
            nodo : new Nodo(null, "ATRIB", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 233:

        hermano = eval('$$');
        this.$ = {
            nodo : hermano[hermano.length - 2].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 234: case 238: case 243: case 248:

        hermano = eval('$$');
        this.$ = {
            nodo : hermano[hermano.length - 1].nodo
        }
    
break;
case 236:

        this.$ = {
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 237: case 247:

        hermano = eval('$$');
        this.$ = {
            nodo : hermano[hermano.length - 3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 240:

        this.$ = {
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 241:

        hermano = eval('$$');
        this.$ = {
            nodo : hermano[hermano.length-3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 242:

        hermano = eval('$$');
        this.$ = {
            nodo : hermano[hermano.length -2].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 245:

        this.$ = {
            nodo : new Nodo(null, "Parametro", null) 
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0]], null, null));
    
break;
case 246:

        this.$ = {
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,12:4,14:5,15:6,16:7,17:8,18:9,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:22,40:$V8,41:$V9,42:$Va,46:$Vb,59:$Vc,64:$Vd,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm,95:$Vn},{1:[3]},{2:$V0,5:[1,45],6:46,12:4,14:5,15:6,16:7,17:8,18:9,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:22,40:$V8,41:$V9,42:$Va,46:$Vb,59:$Vc,64:$Vd,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm,95:$Vn},o($Vo,[2,3]),{13:[1,47]},{13:[1,48]},{13:[1,49],31:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),{13:[1,73]},{36:[1,74]},{36:[1,75]},{36:[1,76]},{15:77,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:79,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:80,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},o($VN,[2,101]),o($VN,[2,102]),o($VN,[2,103]),o($VN,[2,104]),o($VO,$VP,{49:81,34:$VQ,37:[1,82],86:$VR}),o($VN,$VS),o($VN,[2,108]),o($VN,[2,109]),o($VT,[2,20]),o($VT,[2,21]),o($VT,[2,22]),o($VT,[2,23]),o($VT,[2,24]),o($VT,[2,25]),o($VT,[2,26]),o($VT,[2,27]),o($VT,[2,28]),{36:[1,85]},{86:[1,86]},{34:[1,87]},{34:[1,88]},{13:[1,89]},{13:[1,90]},{7:91,8:$VU},{34:[1,93]},{13:[1,94],15:95,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{34:[1,96]},{34:[1,97]},{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),{15:98,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:99,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:100,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:101,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:102,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:103,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:104,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:105,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:106,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:107,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:108,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:109,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:110,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:111,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},o($VN,[2,56]),o($VN,[2,57]),{15:112,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:113,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:114,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:115,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:116,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:117,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:118,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},o($Vo,[2,14]),{32:[1,119]},{32:[1,120],37:[1,121]},{37:[1,122]},o($VV,[2,84],{51:$Vq,52:$Vr}),o($VN,$VP,{49:123,34:$VQ,86:$VR}),o($VV,[2,93],{51:$Vq,52:$Vr}),{39:[1,124],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($VO,$VW,{37:[1,125],86:$VX}),{8:[1,127],15:128,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:131,34:$V5,36:$VM,38:22,39:[1,129],65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,87:130,88:$Vl,90:$Vm},{36:[1,132]},{34:[1,133]},{89:[1,134]},{39:[1,135]},{15:136,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},o($VT,[2,30]),o($VT,[2,29]),{41:[1,137]},{2:$VY,9:138,10:[1,139],11:140,12:141,15:142,16:143,17:144,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:22,40:$V8,41:$V9,42:$Va,46:$Vb,64:$Vd,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{35:[1,146],36:[1,147]},o($VT,[2,31]),{13:[1,148],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{15:149,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:150,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},o([10,13,31,32,36,39,53,54,55,56,57,58,62,66,67],[2,85],{51:$Vq,52:$Vr,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o([10,13,31,32,36,39,53,54,55,56,57,58,62,67],[2,86],{51:$Vq,52:$Vr,66:$Vy,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($VZ,[2,87],{51:$Vq,52:$Vr,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($VZ,[2,88],{51:$Vq,52:$Vr,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V_,[2,89],{51:$Vq,52:$Vr,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V_,[2,90],{51:$Vq,52:$Vr,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V_,[2,91],{51:$Vq,52:$Vr,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V_,[2,92],{51:$Vq,52:$Vr,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V$,[2,94],{51:$Vq,52:$Vr,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V$,[2,95],{51:$Vq,52:$Vr,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V01,[2,96],{51:$Vq,52:$Vr,79:$VL}),o($V01,[2,97],{51:$Vq,52:$Vr,79:$VL}),o($V01,[2,98],{51:$Vq,52:$Vr,79:$VL}),o($VV,[2,99],{51:$Vq,52:$Vr}),o($V11,[2,58],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V11,[2,59],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V11,[2,60],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V11,[2,61],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V11,[2,62],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V11,[2,63],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),{32:[1,151],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{36:[1,153],63:152,91:$V21,92:$V31,93:$V41,94:$V51},{36:[1,159],63:158,91:$V21,92:$V31,93:$V41,94:$V51},{15:160,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{8:[1,161]},o($VN,$VW,{86:$VX}),o($VN,[2,100]),{8:[1,163],15:162,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{36:[1,164]},{36:$V61,50:165},{13:[1,167],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($VN,[2,112]),{39:[1,168],62:$V71},o($V81,[2,118],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($V91,[2,111]),{36:$Va1,39:[1,172],96:170,97:171,142:173},{34:[1,175]},o($VN,[2,116]),{39:[1,176],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{34:[1,177]},{2:$VY,10:[1,178],11:179,12:141,15:142,16:143,17:144,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:22,40:$V8,41:$V9,42:$Va,46:$Vb,64:$Vd,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},o($Vb1,[2,5]),o($Vc1,[2,7]),{13:[1,180]},{13:[1,181],31:$Vp,51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($Vc1,[2,17]),o($Vc1,[2,18]),{13:[1,182]},{36:[1,183]},{37:[1,184]},o($VT,[2,32]),{39:[1,185],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{39:[1,186],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{15:187,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{13:[2,72],37:[1,188]},{13:[2,75],37:[1,189]},o($Vd1,[2,119]),o($Vd1,[2,120]),o($Vd1,[2,121]),o($Vd1,[2,122]),{37:[1,190]},{37:[1,191]},{13:[2,77],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{36:[1,193],60:192},{13:[1,194],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{36:$V61,50:195},o($V91,[2,110]),{10:[1,196],36:$Ve1},{32:[1,198]},o($VT,[2,55]),o($VN,[2,113]),{15:199,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},o($Vo,[2,123]),{39:[1,200]},{32:[1,201]},{39:[2,248],62:[1,203],143:202},{32:[1,204]},{15:131,34:$V5,36:$VM,38:22,39:[1,205],65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,87:206,88:$Vl,90:$Vm},{7:207,8:$VU},{15:208,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},o($Vb1,[2,4]),o($Vc1,[2,6]),o($Vc1,[2,15]),o($Vc1,[2,16]),o($Vc1,[2,19]),{37:[1,209]},{15:210,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{8:[1,211]},{7:212,8:$VU},{13:[1,213],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{15:214,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{8:[1,215],15:216,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{15:217,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{8:[1,218],36:[1,219]},{10:[1,220],36:[1,221]},{32:[1,222]},o($VT,[2,52]),{10:[1,223],36:$Ve1},{13:[1,224]},{32:[1,225]},{15:226,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},o($V81,[2,117],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),{32:[1,227]},{36:$Vf1,63:229,91:$V21,92:$V31,93:$V41,94:$V51,98:228},{39:[2,244]},{36:$Va1,97:231,142:173},{36:[1,233],63:232,91:$V21,92:$V31,93:$V41,94:$V51},o($VN,[2,114]),{39:[1,234],62:$V71},o($VT,[2,48],{47:235,48:[1,236]}),{39:[1,237],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{15:238,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{13:[1,239],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{10:[1,241],43:240,44:[1,242],45:[1,243]},o($VT,[2,37]),o($VT,[2,33]),{13:[2,71],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{36:$V61,50:244},{13:[2,74],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{13:[2,76],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{36:$V61,50:245},{13:[2,79]},{13:[2,64]},{32:[1,246]},{61:[1,247]},{13:[1,248]},o($VT,[2,54]),{15:249,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},o($Vg1,[2,83],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,62:[1,250],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),{36:$Vf1,63:229,91:$V21,92:$V31,93:$V41,94:$V51,98:251},{8:$Vh1,99:252},{8:[2,126]},{8:[2,127]},{39:[2,247]},o($V81,[2,245]),o($V81,[2,246]),o($VN,[2,115]),o($VT,[2,49]),{7:255,8:$VU,19:254,46:$Vb},{13:[1,256]},{13:[1,257],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{15:258,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{10:[1,259],44:[1,260],45:[1,261]},o($VT,[2,39]),{15:262,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{32:[1,263]},{10:[1,264],36:$Ve1},{10:[1,265],36:$Ve1},{61:[1,266]},o($Vg1,[2,70],{13:[1,268],62:[1,267]}),o($VT,[2,53]),o($Vg1,[2,81],{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,62:[1,269],66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL}),o($Vg1,[2,82]),{8:$Vh1,99:270},o($Vo,[2,125]),{2:$Vi1,10:[1,273],28:$Vj1,29:$Vk1,30:$Vl1,33:$Vm1,34:$Vn1,35:$Vo1,36:$Vp1,40:$Vq1,41:$Vr1,42:$Vs1,46:$Vt1,64:$Vu1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,88:$VC1,90:$VD1,100:271,101:272,102:274,104:275,106:276,109:279,110:280,111:281,112:282,113:283,114:284,115:285,116:286,134:297},o($VT,[2,50]),o($VT,[2,51]),o($VT,[2,36]),{15:308,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{13:[1,309],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($VT,[2,38]),{15:310,34:$V5,36:$VM,38:22,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{32:[1,311]},{32:[1,312],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($VE1,[2,46],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,11:140,12:141,15:142,16:143,17:144,9:313,2:$VY,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,64:$Vd,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,85:$Vk,88:$Vl,90:$Vm}),{13:[2,73]},{13:[2,78]},o($Vg1,[2,67],{13:[1,315],62:[1,314]}),o($Vg1,[2,68]),o($Vg1,[2,69]),o($Vg1,[2,80]),o($Vo,[2,124]),o($Vb1,[2,128]),{10:[1,316]},o($Vb1,[2,130]),o($VE1,[2,133],{102:274,104:275,106:276,109:279,110:280,111:281,112:282,113:283,114:284,115:285,116:286,134:297,103:317,101:318,2:$Vi1,28:$Vj1,29:$Vk1,30:$Vl1,33:$Vm1,34:$Vn1,35:$Vo1,36:$Vp1,40:$Vq1,41:$Vr1,42:$Vs1,46:$Vt1,64:$Vu1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,88:$VC1,90:$VD1}),{13:[2,189],31:$VF1,37:[1,335],66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1,105:319},{13:[1,336]},{36:[1,337]},{36:[1,338]},o($Vc1,[2,138]),o($Vc1,[2,139]),o($Vc1,[2,140]),o($Vc1,[2,141]),o($Vc1,[2,142]),o($Vc1,[2,143]),o($Vc1,[2,144]),o($Vc1,[2,145]),{10:[1,340],13:[1,339]},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:341,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:342,134:297},o($VU1,[2,209]),o($VU1,[2,210]),o($VU1,[2,211],{132:343,136:353,34:[1,344],51:[1,345],52:[1,346],53:[1,347],54:[1,348],55:[1,349],56:[1,350],57:[1,351],58:[1,352],86:$VV1}),o($VU1,[2,214]),o($VU1,[2,215]),o($VU1,[2,216]),{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:355,134:297},o($VU1,[2,218]),{86:[1,356]},{34:[1,357]},{34:[1,358]},{34:[1,359]},{34:[1,360]},{8:$Vh1,99:361},{34:[1,362]},{13:[1,363]},{13:[1,364]},{13:[1,367],34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:366,123:365,134:297},{13:[1,368],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},{15:370,34:$V5,36:$VM,38:369,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},{32:[1,371],51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($VE1,[2,43],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,11:140,12:141,15:142,16:143,17:144,9:372,2:$VY,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,64:$Vd,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,85:$Vk,88:$Vl,90:$Vm}),o($VE1,[2,45],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,11:140,12:141,15:142,16:143,17:144,9:373,2:$VY,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,64:$Vd,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,85:$Vk,88:$Vl,90:$Vm}),o($VE1,[2,47],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,12:141,15:142,16:143,17:144,11:179,2:$VY,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,64:$Vd,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,85:$Vk,88:$Vl,90:$Vm}),o($Vg1,[2,65]),o($Vg1,[2,66]),o($Vb1,[2,129]),o($VE1,[2,131]),o($VE1,[2,132]),{13:[1,374]},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:375,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:376,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:377,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:378,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:379,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:380,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:381,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:382,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:383,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:384,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:385,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:386,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:387,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:388,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:389,134:297},{8:[1,392],34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:391,131:390,134:297},o($Vc1,[2,135]),{13:[1,395],32:[1,394],37:[1,396],107:393},{32:[1,398],37:[1,399],108:397},o($Vc1,[2,146]),o($Vc1,[2,147]),o($VU1,[2,192]),o($VU1,[2,201]),o($VU1,[2,212]),{34:$Vn1,36:$Vp1,39:$VW1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:404,133:400,134:297,135:402,138:403},o($VU1,[2,219]),o($VU1,[2,220]),{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:405,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:406,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:407,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:408,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:409,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:410,134:297},o($VU1,[2,234],{136:353,137:411,132:412,86:$VV1}),{36:[1,413]},{31:$VF1,39:[1,414],66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{89:[1,415]},{39:[1,416]},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:417,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:418,134:297},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:419,134:297},{41:[1,420]},{34:$Vn1,35:[1,422],36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:423,124:421,134:297},o($Vc1,[2,166]),o($Vc1,[2,167]),o($Vc1,[2,163]),{13:[1,424],31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},o($Vc1,[2,165]),{15:370,34:$V5,36:$VM,38:425,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,84:23,85:$Vk,88:$Vl,90:$Vm},o($VX1,$VS,{39:[1,426]}),{51:$Vq,52:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,66:$Vy,67:$Vz,68:$VA,69:$VB,70:$VC,71:$VD,72:$VE,73:$VF,74:$VG,75:$VH,76:$VI,77:$VJ,78:$VK,79:$VL},o($VE1,[2,41],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,11:140,12:141,15:142,16:143,17:144,9:427,2:$VY,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,64:$Vd,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,85:$Vk,88:$Vl,90:$Vm}),o($VE1,[2,42],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,12:141,15:142,16:143,17:144,11:179,2:$VY,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,64:$Vd,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,85:$Vk,88:$Vl,90:$Vm}),o($VE1,[2,44],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,12:141,15:142,16:143,17:144,11:179,2:$VY,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,64:$Vd,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,85:$Vk,88:$Vl,90:$Vm}),o($Vc1,[2,134]),o([10,13,31,32,36,37,39,62,66,67],[2,193],{68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o([10,13,31,32,36,37,39,62,67],[2,194],{66:$VG1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($VY1,[2,195],{70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($VY1,[2,196],{70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($VZ1,[2,197],{74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($VZ1,[2,198],{74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($VZ1,[2,199],{74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($VZ1,[2,200],{74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($V_1,[2,202],{76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($V_1,[2,203],{76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($V$1,[2,204],{79:$VT1}),o($V$1,[2,205],{79:$VT1}),o($V$1,[2,206],{79:$VT1}),o($VU1,[2,207]),{31:$VF1,32:[1,428],66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{13:[2,188]},{13:[2,190],31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{36:$V02,122:429,140:430},o($Vc1,[2,136]),{36:[1,434],63:433,91:$V21,92:$V31,93:$V41,94:$V51,119:432},o($Vc1,[2,153]),{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:435,134:297},o($Vc1,[2,137]),{36:[1,438],63:437,91:$V21,92:$V31,93:$V41,94:$V51,117:436},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:439,134:297},o($VU1,[2,213]),o($VU1,[2,229]),{39:[1,440]},{39:[2,238],62:[1,442],139:441},o($V81,[2,236],{31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($V12,[2,221],{31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($V12,[2,222],{31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($V12,[2,223],{31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($V12,[2,224],{31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($V12,[2,225],{31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($V12,[2,226],{31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),o($VU1,[2,231]),o($VU1,[2,233]),o([10,13,31,32,36,37,39,62,66,67,68,69,70,71,72,73,74,75,76,77,78,79,86],[2,232]),o($VU1,[2,217]),{34:[1,443]},{13:[2,228]},{31:$VF1,39:[1,444],66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{31:$VF1,39:[1,445],66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{31:$VF1,39:[1,446],66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{34:[1,447]},o($Vc1,[2,168]),{36:[1,448]},{31:$VF1,37:[1,449],66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},o($Vc1,[2,164]),o($VX1,$VS,{39:[1,450]}),{7:451,8:$VU},o($VE1,[2,40],{38:22,84:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,12:141,15:142,16:143,17:144,11:179,2:$VY,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,64:$Vd,65:$Ve,74:$Vf,80:$Vg,81:$Vh,82:$Vi,83:$Vj,85:$Vk,88:$Vl,90:$Vm}),{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:452,134:297},{10:[1,453]},{10:[2,243],36:$V02,62:[1,455],122:456,140:430,141:454},{32:[1,457]},o($Vc1,[2,152]),{13:[1,459],37:[1,460],120:458},{13:[1,462],37:[1,463],121:461},{13:[1,464],31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},o($Vc1,[2,148]),{37:[1,465]},{37:[1,466]},{13:[1,467],31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},o($VU1,[2,230]),{39:[2,235]},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:404,134:297,135:468,138:403},{34:$Vn1,36:$Vp1,39:$VW1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:404,133:469,134:297,135:402,138:403},{8:$Vh1,99:470},{8:[1,471]},{8:$Vh1,99:472},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:473,134:297},{37:[1,474]},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:475,134:297},{7:476,8:$VU},o($VT,[2,35]),o($V12,[2,208],{31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),{13:[2,191]},{10:[2,239]},{36:$V02,122:477,140:430},{10:[2,242]},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:478,134:297},o($Vc1,[2,155]),o($Vc1,[2,157]),{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:479,134:297},o($Vc1,[2,156]),o($Vc1,[2,159]),{8:$V22,34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:482,118:480,134:297},o($Vc1,[2,154]),{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:483,134:297},{8:$V22,34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:482,118:484,134:297},o($Vc1,[2,149]),{39:[2,237]},{13:[2,227]},o($Vc1,[2,185],{129:485,48:[1,486]}),{10:[1,489],44:$V32,45:$V42,125:487,126:488},o($Vc1,[2,172]),{31:$VF1,39:[1,492],66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:493,134:297},{13:[1,494],31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},o($VT,[2,34]),{10:[2,241]},o([10,36,62],[2,240],{31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1}),{13:[1,495],31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},o($Vc1,[2,160]),{36:$V02,122:496,140:430},{13:[1,497],31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{13:[1,498],31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},o($Vc1,[2,151]),o($Vc1,[2,183]),{8:$Vh1,46:$Vt1,99:501,109:500,130:499},o($Vc1,[2,173]),{10:[1,502]},o($Vc1,[2,175]),{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:503,134:297},{32:[1,504]},{13:[1,505]},{13:[1,506],31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:507,134:297},o($Vc1,[2,158]),{10:[1,508]},o($Vc1,[2,162]),o($Vc1,[2,150]),o($Vc1,[2,184]),o($Vc1,[2,186]),o($Vc1,[2,187]),o($Vc1,[2,174]),{31:$VF1,32:[1,509],66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{2:$Vi1,10:$V52,28:$Vj1,29:$Vk1,30:$Vl1,33:$Vm1,34:$Vn1,35:$Vo1,36:$Vp1,40:$Vq1,41:$Vr1,42:$Vs1,44:$V32,45:$V42,46:$Vt1,64:$Vu1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,88:$VC1,90:$VD1,101:511,102:274,104:275,106:276,109:279,110:280,111:281,112:282,113:283,114:284,115:285,116:286,126:512,127:510,134:297},o($Vc1,[2,171]),{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:513,134:297},{13:[1,514],31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{13:[1,515]},{2:$Vi1,10:$V52,28:$Vj1,29:$Vk1,30:$Vl1,33:$Vm1,34:$Vn1,35:$Vo1,36:$Vp1,40:$Vq1,41:$Vr1,42:$Vs1,44:$V32,45:$V42,46:$Vt1,64:$Vu1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,88:$VC1,90:$VD1,101:511,102:274,104:275,106:276,109:279,110:280,111:281,112:282,113:283,114:284,115:285,116:286,126:512,127:516,134:297},{10:[2,177]},{10:[2,182],44:$V32,45:$V42,126:518,128:517},{10:[2,179]},{13:[1,519],31:$VF1,66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:520,134:297},o($Vc1,[2,161]),{10:[2,176]},{10:[2,178]},{10:[2,181]},{34:$Vn1,36:$Vp1,65:$Vv1,74:$Vw1,80:$Vx1,81:$Vy1,82:$Vz1,83:$VA1,85:$VB1,104:521,134:297},{31:$VF1,39:[1,522],66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{31:$VF1,39:[1,523],66:$VG1,67:$VH1,68:$VI1,69:$VJ1,70:$VK1,71:$VL1,72:$VM1,73:$VN1,74:$VO1,75:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1},{8:$Vh1,99:524},{8:$Vh1,99:525},o($Vc1,[2,170]),o($Vc1,[2,169])],
defaultActions: {45:[2,1],202:[2,244],219:[2,79],220:[2,64],229:[2,126],230:[2,127],231:[2,247],264:[2,73],265:[2,78],390:[2,188],416:[2,228],441:[2,235],453:[2,191],454:[2,239],456:[2,242],468:[2,237],469:[2,227],477:[2,241],510:[2,177],512:[2,179],516:[2,176],517:[2,178],518:[2,181]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let auxnodo = null
    const { Nodo } = require('../Arbol/Nodo');
    const { Type } = require('../Retorno');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 80
break;
case 5:return 81
break;
case 6:return 35
break;
case 7:return 64
break;
case 8:return 91
break;
case 9:return 92
break;
case 10:return 93
break;
case 11:return 94
break;
case 12:return 59
break;
case 13:return 85
break;
case 14:return 82
break;
case 15:return 83
break;
case 16:return 46
break;
case 17:return 48
break;
case 18:return 42
break;
case 19:return 44
break;
case 20:return 41
break;
case 21:return 40
break;
case 22:return 33
break;
case 23:return 'IN'
break;
case 24:return 'OF'
break;
case 25:return 29
break;
case 26:return 28
break;
case 27:return 30
break;
case 28:return 95
break;
case 29:return 88
break;
case 30:return 89
break;
case 31:return 90
break;
case 32:return 45
break;
case 33:return 51
break;
case 34:return 52
break;
case 35:return 53
break;
case 36:return 54
break;
case 37:return 55
break;
case 38:return 56
break;
case 39:return 57
break;
case 40:return 58
break;
case 41:return 32
break;
case 42:return 13
break;
case 43:return 66
break;
case 44:return 67
break;
case 45:return 68
break;
case 46:return 69
break;
case 47:return 65
break;
case 48:return 78
break;
case 49:return 79
break;
case 50:return 72
break;
case 51:return 73
break;
case 52:return 70
break;
case 53:return 71
break;
case 54:return 37
break;
case 55:return 75
break;
case 56:return 74
break;
case 57:return 76
break;
case 58:return 77
break;
case 59:return 86
break;
case 60:return 34
break;
case 61:return 39
break;
case 62:return 62
break;
case 63:return 8
break;
case 64:return 10
break;
case 65:return 31
break;
case 66:return '['
break;
case 67:return ']'
break;
case 68:return 36;
break;
case 69:return 5;
break;
case 70: 
                            console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
                            errores.push(new _Error(yy_.yylloc.first_line, yy_.yylloc.first_column, "Lexico", "El simbolo: " + yy_.yytext + " no pertenece al lenguaje"))
                        
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(("[^\"]*")|(`[^"`"]*`)|('[^"'"]*')))/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:default\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\*\*=)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:\*\*)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}