/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,39],$V2=[1,38],$V3=[1,42],$V4=[1,41],$V5=[1,16],$V6=[1,11],$V7=[1,21],$V8=[1,40],$V9=[1,44],$Va=[1,43],$Vb=[1,37],$Vc=[1,13],$Vd=[1,12],$Ve=[1,14],$Vf=[1,15],$Vg=[1,17],$Vh=[1,18],$Vi=[1,19],$Vj=[1,20],$Vk=[1,24],$Vl=[1,35],$Vm=[1,36],$Vn=[1,34],$Vo=[2,5,28,29,30,33,34,35,36,40,41,42,46,58,63,64,73,79,80,81,82,84,87,89,94],$Vp=[1,64],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[1,59],$Vz=[1,58],$VA=[1,60],$VB=[1,61],$VC=[1,62],$VD=[1,63],$VE=[1,70],$VF=[10,13,31,32,36,39,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$VG=[13,31,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$VH=[2,104],$VI=[1,82],$VJ=[1,75],$VK=[1,76],$VL=[1,77],$VM=[1,78],$VN=[1,79],$VO=[1,80],$VP=[1,81],$VQ=[1,83],$VR=[2,5,10,28,29,30,33,34,35,36,40,41,42,44,45,46,58,63,64,73,79,80,81,82,84,87,89,94],$VS=[1,91],$VT=[2,105],$VU=[1,118],$VV=[1,142],$VW=[10,13,31,32,36,39,61,65,66,67,68],$VX=[10,13,31,32,36,39,61,65,66,67,68,69,70,71,72],$VY=[10,13,31,32,36,39,61,65,66,67,68,69,70,71,72,73,74],$VZ=[10,13,31,32,36,39,61,65,66,67,68,69,70,71,72,73,74,75,76,77],$V_=[1,151],$V$=[1,152],$V01=[1,153],$V11=[1,154],$V21=[1,162],$V31=[10,13,31,32,36,39,61],$V41=[1,165],$V51=[39,61],$V61=[10,13,31,32,36,37,39,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,85],$V71=[1,170],$V81=[2,5,10,28,29,30,33,34,35,36,40,41,42,44,45,46,48,58,63,64,73,79,80,81,82,84,87,89,94],$V91=[2,10,28,29,30,33,34,35,36,40,41,42,44,45,46,63,64,73,79,80,81,82,84,87,89],$Va1=[8,13,37,39,61],$Vb1=[1,193],$Vc1=[1,226],$Vd1=[10,36],$Ve1=[1,249],$Vf1=[1,283],$Vg1=[1,302],$Vh1=[1,301],$Vi1=[1,303],$Vj1=[1,300],$Vk1=[1,292],$Vl1=[1,273],$Vm1=[1,288],$Vn1=[1,299],$Vo1=[1,298],$Vp1=[1,297],$Vq1=[1,296],$Vr1=[1,274],$Vs1=[1,284],$Vt1=[1,285],$Vu1=[1,286],$Vv1=[1,287],$Vw1=[1,289],$Vx1=[1,290],$Vy1=[1,291],$Vz1=[1,294],$VA1=[1,295],$VB1=[10,44,45],$VC1=[1,330],$VD1=[1,316],$VE1=[1,317],$VF1=[1,318],$VG1=[1,319],$VH1=[1,320],$VI1=[1,321],$VJ1=[1,322],$VK1=[1,323],$VL1=[1,325],$VM1=[1,324],$VN1=[1,326],$VO1=[1,327],$VP1=[1,328],$VQ1=[1,329],$VR1=[10,13,31,32,36,37,39,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$VS1=[1,350],$VT1=[1,366],$VU1=[1,394],$VV1=[10,13,31,32,36,37,39,61,65,66,67,68],$VW1=[10,13,31,32,36,37,39,61,65,66,67,68,69,70,71,72],$VX1=[10,13,31,32,36,37,39,61,65,66,67,68,69,70,71,72,73,74],$VY1=[10,13,31,32,36,37,39,61,65,66,67,68,69,70,71,72,73,74,75,76,77],$VZ1=[1,424],$V_1=[10,13,32,36,37,39,61],$V$1=[1,470],$V02=[1,479],$V12=[1,480],$V22=[2,176];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"InstruccionesSentencia":7,"{":8,"LInstruccionSentencia":9,"}":10,"InstruccionSentencia":11,"Declaracion":12,";":13,"Declaracion_type":14,"Expresion":15,"Asignacion":16,"Sentencias_control":17,"Funcion":18,"Sentencia_if":19,"Sentenciabreak":20,"Sentenciacontinue":21,"Sentenciadowhile":22,"Sentenciafor":23,"SentenciaReturn":24,"Sentenciaswitch":25,"SentenciaTernaria":26,"Sentenciawhile":27,"CONTINUE":28,"BREAK":29,"RETURN":30,"?":31,":":32,"FOR":33,"(":34,"LET":35,"IDENTIFICADOR":36,"=":37,"Aumento":38,")":39,"DO":40,"WHILE":41,"SWITCH":42,"Casos":43,"CASE":44,"DEFAULT":45,"IF":46,"Sentenciaelse":47,"ELSE":48,"Listaatributos":49,"Lvalorestype":50,"++":51,"--":52,"+=":53,"-=":54,"*=":55,"/=":56,"%=":57,"TYPE":58,"Latributostype":59,"TipoatributosType":60,",":61,"Tipo":62,"CONST":63,"!":64,"&&":65,"||":66,"==":67,"!=":68,"<":69,">":70,"<=":71,">=":72,"-":73,"+":74,"*":75,"/":76,"%":77,"**":78,"NUMERO":79,"CADENA":80,"TRUE":81,"FALSE":82,"Llamada":83,"NULL":84,".":85,"Listaparam":86,"CONSOLE":87,"LOG":88,"GRAFICAR_TS":89,"STRING":90,"NUMBER":91,"BOOLEAN":92,"VOID":93,"FUNCTION":94,"Funcion1":95,"Lparametrosfuncion":96,"Tipofuncion":97,"InstruccionesFuncion":98,"InstruccionesFuncion1":99,"Linstrucciones":100,"Instruccionfuncion":101,"Linstrucciones1":102,"Expresionesfuncion":103,"Instruccionfuncion1":104,"Llamadas_funcion":105,"Auxdeclaracion":106,"Auxdeclaracion4":107,"sentencia_if":108,"sentencia_switch":109,"sentencia_while":110,"sentencia_dowhile":111,"sentencia_for":112,"sentencia_break":113,"sentencia_continue":114,"Sentencia_return":115,"Auxdeclaracion5":116,"Auxdeclaracion6":117,"Auxdeclaracion1":118,"Auxdeclaracion2":119,"Auxdeclaracion3":120,"ValoresType":121,"Sentencia_return1":122,"sentencia_for1":123,"Lcasosswitch":124,"Lcasos":125,"Lcasos1":126,"Lcasos2":127,"sentencia_else":128,"sentencia_else1":129,"instruccionfuncion12":130,"Atributos":131,"Instruccionfuncion2":132,"Aumento_funcion":133,"**=":134,"Parametrosllamada":135,"Atributo":136,"Atributos1":137,"Parametrollamada":138,"Parametrosllamada1":139,"Valortype":140,"ValoresType1":141,"Parametro":142,"Auxparametros":143,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",10:"}",13:";",28:"CONTINUE",29:"BREAK",30:"RETURN",31:"?",32:":",33:"FOR",34:"(",35:"LET",36:"IDENTIFICADOR",37:"=",39:")",40:"DO",41:"WHILE",42:"SWITCH",44:"CASE",45:"DEFAULT",46:"IF",48:"ELSE",51:"++",52:"--",53:"+=",54:"-=",55:"*=",56:"/=",57:"%=",58:"TYPE",60:"TipoatributosType",61:",",63:"CONST",64:"!",65:"&&",66:"||",67:"==",68:"!=",69:"<",70:">",71:"<=",72:">=",73:"-",74:"+",75:"*",76:"/",77:"%",78:"**",79:"NUMERO",80:"CADENA",81:"TRUE",82:"FALSE",84:"NULL",85:".",87:"CONSOLE",88:"LOG",89:"GRAFICAR_TS",90:"STRING",91:"NUMBER",92:"BOOLEAN",93:"VOID",94:"FUNCTION",134:"**="},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[9,2],[9,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[11,2],[11,2],[11,1],[11,1],[11,2],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[21,2],[20,2],[24,2],[24,3],[26,6],[23,12],[23,11],[22,7],[27,5],[25,7],[25,6],[43,5],[43,4],[43,4],[43,3],[43,4],[43,3],[43,2],[43,3],[19,5],[19,6],[47,2],[47,2],[16,5],[16,7],[16,6],[16,4],[38,2],[38,2],[38,3],[38,3],[38,3],[38,3],[38,3],[14,6],[59,5],[59,5],[59,4],[59,4],[59,4],[59,3],[12,6],[12,4],[12,8],[12,6],[12,4],[12,6],[12,4],[12,8],[12,6],[50,5],[50,4],[50,4],[50,3],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,1],[15,1],[15,1],[49,3],[49,2],[83,3],[83,4],[83,5],[83,6],[83,3],[86,3],[86,1],[62,1],[62,1],[62,1],[62,1],[18,4],[95,5],[95,4],[97,1],[97,1],[98,2],[99,2],[99,1],[100,2],[102,1],[102,0],[101,3],[101,2],[101,3],[101,3],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,1],[101,2],[101,2],[107,2],[116,4],[116,3],[106,2],[118,2],[118,2],[119,1],[119,3],[120,1],[120,2],[117,4],[117,2],[115,2],[122,2],[122,1],[113,2],[114,2],[112,3],[123,10],[123,9],[111,7],[110,5],[109,6],[124,2],[124,1],[125,4],[125,3],[126,2],[126,1],[126,0],[127,1],[127,0],[108,6],[128,2],[128,0],[129,1],[129,1],[104,2],[104,0],[130,1],[130,3],[103,2],[103,3],[103,3],[103,3],[103,3],[103,3],[103,3],[103,3],[103,3],[103,2],[103,3],[103,3],[103,3],[103,3],[103,3],[103,3],[103,5],[103,1],[103,1],[103,1],[103,2],[103,3],[103,1],[103,1],[103,1],[103,3],[103,1],[133,2],[133,2],[133,3],[133,3],[133,3],[133,3],[133,3],[133,3],[105,5],[105,3],[132,1],[132,2],[131,2],[136,2],[137,1],[137,0],[135,2],[138,1],[139,2],[139,0],[121,2],[140,3],[141,2],[141,1],[141,0],[96,2],[142,3],[142,3],[143,2],[143,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        
        this.$ = {
            nodo : new Nodo("INICIO"),
            instruccion : $$[$0-1].instruccion
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        //$$[$0-1].nodo.addPadre(this.$.nodo)
        return this.$;
    
break;
case 2:

        $$[$0-1].instruccion.push($$[$0].instruccion);
        this.$ = {
            instruccion : $$[$0-1].instruccion,
            nodo : new Nodo("INST")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 3:

        this.$ = {
            instruccion : [$$[$0].instruccion],
            nodo : new Nodo("INST")
        };
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 4:

        this.$ = {
            instruccion : new Cuerposentencia($$[$0-1].instruccion, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : $$[$0-1]
        }
    
break;
case 5:

        this.$ = {
            instrucciones : null,
            nodo : null
        };
    
break;
case 6:

        $$[$0-1].instruccion.push($$[$0].instruccion);
        this.$ = {
            instruccion : $$[$0-1].instruccion,
            nodo : new Nodo("Inst")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 7:

        this.$ = {
            instruccion : [$$[$0].instruccion],
            nodo : new Nodo("Inst")
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 8: case 9: case 10: case 15: case 16: case 99: case 128: case 170: case 213: case 226:

        this.$ = $$[$0-1];
    
break;
case 11: case 12: case 13: case 17: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 28: case 106: case 107: case 130: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 147: case 151: case 152: case 156: case 177: case 182: case 183: case 184: case 214: case 227: case 231: case 235:

        this.$ = $$[$0];
    
break;
case 18: case 27: case 125: case 126: case 150: case 240:

        this.$ = $$[$0]
    
break;
case 29:

        this.$ = {
            instruccion : new Continue(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Continue")
        }
    
break;
case 30:

        this.$ = {
            instruccion : new Break(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Break")
        }
    
break;
case 31:

        this.$ = {
            nodo : new Nodo("Return")
        }
    
break;
case 32:

        this.$ = {
            nodo : new Nodo("Return")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 33:

        this.$ = {
            nodo : new Nodo("Ternario")
        }
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-5].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        this.$.nodo.agregarHijo($$[$0-3].nodo);
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 34:

        this.$ = {
            instruccion : new Sentenciafor(true, $$[$0-8], $$[$0-6].instruccion, $$[$0-4].instruccion, $$[$0-2].instruccion, $$[$0].instruccion, _$[$0-11].first_line, _$[$0-11].first_column),
            nodo : new Nodo("For")
        };
        auxnodo = new Nodo('=');
        auxnodo.agregarHijo(new Nodo($$[$0-8]));
        auxnodo.agregarHijo($$[$0-6].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-4].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        if($$[$0].nodo != null){
            this.$.nodo.agregarHijo($$[$0].nodo)
        }
    
break;
case 35:

        this.$ = {
            instruccion : new Sentenciafor(false, $$[$0-8], $$[$0-6].instruccion, $$[$0-4].instruccion, $$[$0-2].instruccion, $$[$0].instruccion, _$[$0-10].first_line, _$[$0-10].first_column),
            nodo : new Nodo("For")
        }
        auxnodo = new Nodo('=');
        auxnodo.agregarHijo(new Nodo($$[$0-8]))
        auxnodo.agregarHijo($$[$0-6].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-4].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        if($$[$0].nodo != null){
            this.$.nodo.agregarHijo($$[$0].nodo);
        }
    
break;
case 36:

        this.$ = {
            instruccion : new Sentenciadowhile($$[$0-2].instruccion, $$[$0-5].instruccion, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo("Do_while")
        }
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0-5].nodo);
        }
        auxnodo = new Nodo("Condicion")
        auxnodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo(auxnodo);
    
break;
case 37:

        this.$ = {
            instruccion : new Sentenciawhile($$[$0-2].instruccion, $$[$0].instruccion, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo("While")
        }
        auxnodo = new Nodo("Condicion")
        auxnodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0].nodo);
        }
    
break;
case 38:

        this.$ = {
            nodo : new Nodo("Switch") 
        }
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-4].nodo)
        this.$.nodo.agregarHijo(auxnodo);
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 39:

        this.$ = {
            nodo : new Nodo("Switch")
        }
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-3].nodo)
        this.$.nodo.agregarHijo(auxnodo)
    
break;
case 40:

        this.$ = {
            nodo : new Nodo("Caso")
        };
        this.$.nodo.agregarHijo($$[$0-4].nodo)
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 41:

        this.$ = {
            nodo : new Nodo("Caso")
        }
        this.$.nodo.agregarHijo($$[$0-3].nodo)
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 42:

        this.$ = {
            nodo : new Nodo("Caso")
        };
        this.$.nodo.agregarHijo($$[$0-3].nodo)
        this.$.nodo.agregarHijo(new Nodo("Default"))
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 43:

        this.$ = {
            nodo : new Nodo("Caso")
        };
        this.$.nodo.agregarHijo($$[$0-2].nodo)
        this.$.nodo.agregarHijo(new Nodo("Default"))
    
break;
case 44:

        this.$ = {
            nodo : new Nodo("Caso")
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 45:

        this.$ = {
            nodo : new Nodo("Caso")
        }
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 46:

        this.$ = {
            nodo : new Nodo("Caso") 
        }
        this.$.nodo.agregarHijo(new Nodo("Default"));
    
break;
case 47:

        this.$ = {
            nodo : new Nodo("Caso")
        }
        this.$.nodo.agregarHijo(new Nodo("Default"))
        this.$.nodo.agregarHijo($$[$0])
    
break;
case 48:

        this.$ = {
            instruccion : new Sentenciaif($$[$0-2].instruccion, $$[$0].instruccion, null, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo("IF")
        };
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0].nodo)
        };
    
break;
case 49:

        this.$ = {
            instruccion : new Sentenciaif($$[$0-3].instruccion, $$[$0-1].instruccion, $$[$0].instruccion, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("IF")
        }
        auxnodo = new Nodo("Condicion");
        auxnodo.agregarHijo($$[$0-3].nodo);
        this.$.nodo.agregarHijo(auxnodo);
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0-1].nodo)
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 50:

        this.$ = {
            instruccion : $$[$0].instruccion,
            nodo : new Nodo("ELSE")
        }
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 51:

        this.$ = {
            instruccion : $$[$0].instruccion,
            nodo : new Nodo("ELSE")
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijo($$[$0].nodo)
        }
    
break;
case 52:

        this.$ = {
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo($$[$0-3].nodo)
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 53:

        this.$ = {
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-6]))
        this.$.nodo.agregarHijo($$[$0-5].nodo)
        this.$.nodo.agregarHijo($$[$0-2].nodo)
    
break;
case 54:

        this.$ = {
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-5]));
        this.$.nodo.agregarHijo($$[$0-2].nodo)
    
break;
case 55:

        this.$ = {
            instruccion : new Asignacion($$[$0-3], $$[$0-1].instruccion, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Asignacion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 56:

        this.$ = {
            instruccion : new Incremento($$[$0-1], new Literal(1, Type.NUMERO, _$[$0-1].first_line, _$[$0-1].first_column), OpcionesAritmeticas.MAS, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Incremento")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-1]));
        this.$.nodo.agregarHijo(new Nodo('++'));
        
    
break;
case 57:

        this.$ = {
            instruccion : new Incremento($$[$0-1], new Literal(1, Type.NUMERO, _$[$0-1].first_line, _$[$0-1].first_column), OpcionesAritmeticas.MENOS, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Incremento")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-1]));
        this.$.nodo.agregarHijo(new Nodo('--'));
    
break;
case 58:

        this.$ = {
            instruccion : new Incremento($$[$0-2], $$[$0].instruccion, OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("+=")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 59:

        this.$ = {
            instruccion : new Incremento($$[$0-2], $$[$0].instruccion, OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("-=")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 60:

        this.$ = {
            instruccion : new Incremento($$[$0-2], $$[$0].instruccion, OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("*=")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 61:

        this.$ = {
            instruccion : new Incremento($$[$0-2], $$[$0].instruccion, OpcionesAritmeticas.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo("/=")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]))
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 62:

        this.$ = {
            instruccion : new Incremento($$[$0-2], $$[$0].instruccion, OpcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%=')
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 63:

        this.$ = {
            nodo : new Nodo("DECLARACION_TYPE")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 64:

        this.$ = {
            nodo : new Nodo("Valor")
        };
        this.$.nodo.agregarHijo($$[$0-4].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]))
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 65:

        this.$ = {
            nodo : new Nodo("Valor")
        }
        this.$.nodo.agregarHijo($$[$0-4].nodo)
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]))
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 66:

        this.$ = {
            nodo : new Nodo("Valor")
        };
        this.$.nodo.agregarHijo($$[$0-3].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 67:

        this.$ = {
            nodo : new Nodo("Valor") 
        };
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 68:

        this.$ = {
            nodo : new Nodo("Valor")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 69:

        this.$ = {
            nodo : new Nodo("Valor")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]))
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 70:

        this.$ = {
            instruccion : new Declaracion($$[$0-4], $$[$0-2], $$[$0].instruccion, 0, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo(Type[$$[$0-2]]));
        this.$.nodo.agregarHijo(new Nodo('='))
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 71:

        this.$ = {
            instruccion : new Declaracion($$[$0-2], $$[$0], null, 0, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo(Type[$$[$0]]));
    
break;
case 72:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-6]));
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 73:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 74:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo($$[$0-1]));
    
break;
case 75:

        this.$ = {
            instruccion : new Declaracion($$[$0-4], $$[$0-2], $$[$0].instruccion, 1, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo(Type[$$[$0-2]]))
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 76:

        this.$ = {
            instruccion : new Declaracion($$[$0-2], $$[$0], null, 1, _$[$0-3].first_line, _$[$0-3].first_column),
            nodo : new Nodo("Declaracion")
        };
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 77:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-6])) ;
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 78:

        this.$ = {
            nodo : new Nodo("Declaracion")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-4]));
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo(new Nodo('='));
        this.$.nodo.agregarHijo(new Nodo($$[$0]));
    
break;
case 79:

        this.$ = {
            nodo : new Nodo("Valores")
        }
        this.$.nodo.agregarHijo($$[$0-4].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]))
        this.$.nodo.agregarHijo($$[$0-1].nodo)
    
break;
case 80:

        this.$ = { 
            nodo : new Nodo("Valores")
        };
        this.$.nodo.agregarHijo($$[$0-3].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 81:

        this.$ = {
            nodo : new Nodo("Valores")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 82:

        this.$ = {
            nodo : new Nodo("Valores")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 83:

        this.$ = {
            instruccion : new Logica($$[$0].instruccion, null, OpcionesLogicas.NOT, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('!')
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 84:

        this.$ = {
            instruccion : new Logica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesLogicas.AND, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('&&')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 85:

        this.$ = {
            instruccion : new Logica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('||') 
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 86:

        this.$ = {
            instruccion : new Logica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesLogicas.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo ('==')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 87:

        this.$ = {
            instruccion : new Logica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesLogicas.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('!=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 88:

        this.$ = {
            instruccion : new Logica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesLogicas.MENOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 89:

        this.$ = {
            instruccion : new Logica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesLogicas.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 90:

        this.$ = {
            instruccion : new Logica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesLogicas.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 91:

        this.$ = {
            instruccion : new Logica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesLogicas.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>=')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 92:

        this.$ = {
            instruccion : new Aritmetica($$[$0-1].instruccion, null, OpcionesAritmeticas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('-')
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 93:

        this.$ = {
            instruccion : new Aritmetica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('+')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 94:

        this.$ = {
            instruccion : new Aritmetica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('-')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo)
    
break;
case 95:

        this.$ = {
            instruccion : new Aritmetica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('*')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 96:

        this.$ = {
            instruccion : new Aritmetica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesAritmeticas.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('/')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 97:

        this.$ = {
            instruccion : new Aritmetica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column), 
            nodo : new Nodo('%')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 98:

        this.$ = {
            instruccion : new Aritmetica($$[$0-2].instruccion, $$[$0].instruccion, OpcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 100:

        this.$ = {
            instruccion : new Literal($$[$0], Type.NUMERO, _$[$0].first_line, _$[$0].first_column),
            nodo : new Nodo($$[$0])
        }
    
break;
case 101:

        if($$[$0].includes('\"'))
        {
            this.$ = {
                instruccion : new Literal($$[$0].replace(/['"]+/g, ''), Type.CADENA, _$[$0].first_line, _$[$0].first_column),
                nodo : new Nodo($$[$0].replace(/['"]+/g, ''))
            }
        }
        else if($$[$0].includes("'"))
        {
            this.$ = {
                instruccion : new Literal($$[$0].replace(/["'"]+/g, ''), Type.CADENA, _$[$0].first_line, _$[$0].first_column),
                nodo : new Nodo($$[$0].replace(/["'"]+/g, ''))
            }
        }
        else
        {
            this.$ = {
                nodo : new Nodo($$[$0])
            }
        }
    
break;
case 102:

        this.$ = {
            instruccion : new Literal(true, Type.BOOLEANO, _$[$0].first_line, _$[$0].first_column),
            nodo : new Nodo($$[$0])
        }
    
break;
case 103:

        this.$ = {
            instruccion : new Literal(false, Type.BOOLEANO, _$[$0].first_line, _$[$0].first_column),
            nodo : new Nodo($$[$0])
        }
    
break;
case 104:

        this.$ = {
            instruccion : new Variable($$[$0], _$[$0].first_line, _$[$0].first_column),
            nodo : new Nodo($$[$0])
        }
    
break;
case 105:

        this.$ = {
            nodo : new Nodo('EXP')
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-1]));
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 108:

        this.$ = {
            nodo : new Nodo($$[$0])
        }
    
break;
case 109:

        this.$ = {
            nodo : new Nodo('ATRIB')
        }
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo(new Nodo($$[$0]))
        this.$ = $$[$0-2];
    
break;
case 110:

        this.$ = {
            nodo : new Nodo('ATRIB')
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0]));
    
break;
case 111:

        this.$ = {
            nodo : new Nodo('Llamada')
        };
        this.$.nodo.agregarHijo(new Nodo($$[$0-2]));
    
break;
case 112:

        this.$ = {
            nodo : new Nodo("Llamada")
        }
        this.$.nodo.agregarHijo(new Nodo($$[$0-3]));
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 113:

        this.$ = {
            instruccion : new Imprimir(null, $$[$0-4].first_line, $$[$0-4].first_column),
            nodo : new Nodo("Imprimir")
        }
    
break;
case 114:

        this.$ = {
            instruccion : new Imprimir($$[$0-1].instruccion, $$[$0-5].first_line, $$[$0-5].first_column),
            nodo : new Nodo("Imprimir")

        }
        this.$.nodo.agregarHijo($$[$0-1].nodo);
    
break;
case 115:

        this.$ = {
            nodo : new Nodo("GraficarTs")
        }
    
break;
case 116:

        $$[$0-2].instruccion.push($$[$0].instruccion)
        this.$ = {
            instruccion : $$[$0-2].instruccion,
            nodo : new Nodo("Parametro")
        };
        this.$.nodo.agregarHijo($$[$0-2].nodo);
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 117:

        this.$ = {
            instruccion : [$$[$0].instruccion],
            nodo : new Nodo("Parametro")
        }
        this.$.nodo.agregarHijo($$[$0].nodo);
    
break;
case 118:

        this.$ = Type.CADENA;
    
break;
case 119:

        this.$ = Type.NUMERO;
    
break;
case 120:

        this.$ = Type.BOOLEANO
    
break;
case 121:

        this.$ = Type.VOID;
    
break;
case 122:

        if($$[$0].parametros != null)
        {
            this.$ = {
                //instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, $$[$0].parametros.instrucciones, $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos($$[$0].parametros.nodo);
            if(isNaN($$[$0].tipo) == false)
            {
                this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            }
            else
            {
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            }
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
        else
        {
            this.$ = {
                //instrucciones : new Funcion($$[$0-2], $$[$0].instrucciones_f.instrucciones, new Array(), $$[$0].tipo, _$[$0-3].first_line, _$[$0-3].first_column),
                nodo : new Nodo(null, "Funcion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
            this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
            if($$[$0].instrucciones_f.nodo != null)
            {
                this.$.nodo.agregarHijos($$[$0].instrucciones_f.nodo)
            }
        }
    
break;
case 123:

        this.$ = {
            parametros : $$[$0-4],
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 124:

        this.$ = {
            parametros : null,
            tipo : $$[$0-1],
            instrucciones_f : $$[$0]
        }
    
break;
case 127:

        if($$[$0].instrucciones != null)
        {
            this.$ = {
                //instrucciones : new Cuerposentencia($$[$0].instrucciones, _$[$0-1].linea, _$[$0-1].columna),
                nodo : $$[$0].nodo
            }
        }
        else
        {
            this.$ = $$[$0];
        }
    
break;
case 129:

        this.$ = {
            //instrucciones : null,
            nodo : null
        };
    
break;
case 131:

        hermano = eval('$$');
        hermano[hermano.length - 1].instrucciones.unshift(hermano[hermano.length - 2].instrucciones);
        this.$ = {
            //instrucciones : hermano[hermano.length - 1].instrucciones,
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 2].nodo)
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 132:

        hermano = eval('$$');
        this.$ = {
            //instrucciones : [hermano[hermano.length - 1].instrucciones],
            nodo : new Nodo(null, "INST", null)
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 133:

        if($$[$0-1].contenido.instrucciones != null)
        {
            if($$[$0-1].estype == false)
            {
                this.$ = {
                    //instrucciones : new Asignacion($$[$0-2].instrucciones.nombre, $$[$0-2].instrucciones.atributos, $$[$0-1].contenido.instrucciones, $$[$0-2].instrucciones.linea, $$[$0-2].instrucciones.columna),
                    nodo : new Nodo("Asignacion", null, null)
                }
                this.$.nodo.agregarHijos($$[$0-2].nodo);
                this.$.nodo.agregarHijos($$[$0-1].contenido.nodo)
            }
            else
            {
                this.$ = {
                    //instrucciones : new AsignacionVarType($$[$0-2].instrucciones.nombre, $$[$0-2].instrucciones.atributos, $$[$0-1].contenido.instrucciones, $$[$0-2].instrucciones.linea, $$[$0-2].instrucciones.columna),
                    nodo : new Nodo("Asignacion", null, null)
                }
                this.$.nodo.agregarHijos($$[$0-2].nodo)
                this.$.nodo.agregarHijos($$[$0-1].contenido.nodo)
            }
        }
        else
        {
            this.$ = $$[$0-2];
        }
    
break;
case 134:

        hermano = eval('$$');
        this.$ = hermano[hermano.length - 2];
    
break;
case 135:

        if($$[$0].estype == false){
            if($$[$0].valor == null && $$[$0].tipo == null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], null, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
            }
            else if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                if(isNaN($$[$0].tipo) == false)
                {
                    this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                }
                else
                {
                    this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
                }
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                if(isNaN($$[$0].tipo) == false)
                {
                    this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                }
                else
                {
                    this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
                }
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
            else if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo("Declaracion", null, null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo('=', null, null));
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
        else
        {
            if($$[$0].valor == null && $$[$0].tipo != null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], null, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            }
            else if($$[$0].valor != null && $$[$0].tipo != null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.VAR, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
                this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
    
break;
case 136:

        if($$[$0].estype == false)
        {
            if($$[$0].valor != null && $$[$0].tipo == null)
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], $$[$0].valor, null, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo('=', null, null))
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
            else
            {
                this.$ = {
                    //instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                    nodo : new Nodo(null, "Declaracion", null)
                }
                this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
                this.$.nodo.agregarHijos(new Nodo(Type[$$[$0].tipo], null, null))
                this.$.nodo.agregarHijos(new Nodo('=', null, null));
                this.$.nodo.agregarHijos($$[$0].nodo)
            }
        }
        else
        {
            this.$ = {
                //instrucciones : new Declaracion($$[$0-1], $$[$0].valor, $$[$0].tipo, TiposSimbolo.CONST, _$[$0-2].first_line, _$[$0-2].first_column),
                nodo : new Nodo(null, "Declaracion", null)
            }
            this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null))
            this.$.nodo.agregarHijos(new Nodo($$[$0].tipo, null, null))
            this.$.nodo.agregarHijos(new Nodo('=', null, null))
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 148:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 149:

        hermano = eval('$$');
        this.$ = $$[$0]
    
break;
case 153:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 154:

        hermano = eval('$$');
        this.$ = {
            estype : false,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        };
    
break;
case 155:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : null,
            tipo : hermano[hermano.length - 2]
        }
    
break;
case 157:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 3].instrucciones,
            tipo : hermano[hermano.length - 6],
            nodo : hermano[hermano.length - 3].nodo
        }
    
break;
case 158:

        hermano = eval('$$');
        this.$ = {
            estype : true,
            valor : hermano[hermano.length - 2].instrucciones,
            tipo : hermano[hermano.length - 4],
            nodo : hermano[hermano.length - 2].nodo
        }
    
break;
case 159:

        this.$ = {
            //instrucciones : new SentenciaReturn($$[$0].instrucciones, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Return", null, null)
        }
        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 160:

        hermano = eval('$$');
        this.$ = {
            //instrucciones : hermano[hermano.length - 2].instrucciones,
            nodo : hermano[hermano.length - 2].nodo
        };
    
break;
case 161: case 181:

        this.$ = {
            //instrucciones : null,
            nodo : null
        }
    
break;
case 162:

        this.$ = {
            //instrucciones : new Break(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Break", null, null)
        }
    
break;
case 163:

        this.$ = {
            //instrucciones : new Continue(_$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo("Continue", null, null)
        };
    
break;
case 164:

        this.$ = {
            //instrucciones : new SentenciaFor($$[$0].declarado, $$[$0].id, $$[$0].valor_inicio.instrucciones, $$[$0].condicion.instrucciones, $$[$0].incremento.instrucciones, $$[$0].instrucciones.instrucciones, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo(null, "For", null)
        }
        instruccion = new Nodo("=", null, null)
        instruccion.agregarHijos(new Nodo($$[$0].id, null, null))
        instruccion.agregarHijos($$[$0].valor_inicio.nodo)
        this.$.nodo.agregarHijos(instruccion);
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0].condicion.nodo)
        this.$.nodo.agregarHijos(instruccion)
        this.$.nodo.agregarHijos($$[$0].incremento.nodo)
        if($$[$0].instrucciones.nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].instrucciones.nodo)
        }
    
break;
case 165:

        this.$ = {
            id : $$[$0-8],
            valor_inicio : $$[$0-6],
            condicion : $$[$0-4],
            incremento : $$[$0-2],
            //instrucciones : $$[$0],
            declarado : 1
        }
    
break;
case 166:

        this.$ = {
            id : $$[$0-8],
            valor_inicio : $$[$0-6],
            condicion : $$[$0-4],
            incremento : $$[$0-2],
            //instrucciones : $$[$0],
            declarado : 0
        }
    
break;
case 167:

        this.$ = {
            //instrucciones : new SentenciaDowhile($$[$0-2].instrucciones, $$[$0-5].instrucciones, _$[$0-6].first_line, _$[$0-6].first_column),
            nodo : new Nodo(null, "Do_while", null)
        }
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-2].nodo)
        if($$[$0-5].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-5].nodo)
        }
        this.$.nodo.agregarHijos(instruccion)
    
break;
case 168:

        this.$ = {
            //instrucciones : new SentenciaWhile($$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "While", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-2].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].nodo != null){
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 169:

        this.$ = {
            //instrucciones : new SentenciaSwitch($$[$0-3].instrucciones, $$[$0].casos, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "Switch", null)
        };
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-3].nodo)
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0].casos != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo_casos)
        }
    
break;
case 171:

        this.$ = {
            casos : null,
            nodo_casos : null
        };
    
break;
case 172:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = {
                casos : [new Caso($$[$0-2].instrucciones, hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column)],
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos($$[$0-2].nodo)
            if(hermano[hermano.length - 1].instrucciones != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new Caso($$[$0-2].instrucciones, hermano[hermano.length - 1].instrucciones, _$[$0-3].first_line, _$[$0-3].first_column))
            this.$ = {
                casos : hermano[hermano.length - 1].casos,
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos($$[$0-2].nodo);
            if(hermano[hermano.length - 1].nodo != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }            
            this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo_casos)
        }
    
break;
case 173:

        hermano = eval('$$');
        if(hermano[hermano.length - 1].casos == null)
        {
            this.$ = {
                casos : [new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column)],
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos(new Nodo("Default", null, null));
            if(hermano[hermano.length - 1].instrucciones != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
        }
        else
        {
            hermano[hermano.length - 1].casos.unshift(new CasoDef(hermano[hermano.length - 1].instrucciones, _$[$0-2].first_line, _$[$0-2].first_column));
            this.$ = {
                casos : hermano[hermano.length - 1].casos,
                nodo_casos : new Nodo(null, "Caso", null)
            }
            this.$.nodo_casos.agregarHijos(new Nodo("Default", null, null))
            if(hermano[hermano.length - 1].nodo != null)
            {
                this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo)
            }
            this.$.nodo_casos.agregarHijos(hermano[hermano.length - 1].nodo_casos)
        }
    
break;
case 174:

        hermano = eval('$$')
        if(hermano[hermano.length - 1] == null)
        {
            this.$ = {
                //instrucciones : hermano[hermano.length - 2].instrucciones,
                casos : null,
                nodo : hermano[hermano.length - 2].nodo,
                nodo_casos : null
            }
        }
        else
        {
            this.$ = {
                //instrucciones : hermano[hermano.length - 2].instrucciones,
                casos : hermano[hermano.length - 1].casos,
                nodo : hermano[hermano.length - 2].nodo,
                nodo_casos : hermano[hermano.length - 1].nodo_casos
            }
        }
        
    
break;
case 175:

        hermano = eval('$$');
        this.$ = {
            //instrucciones : null,
            casos : hermano[hermano.length - 1].casos,
            nodo : null,
            nodo_casos : hermano[hermano.length - 1].nodo_casos
        }
    
break;
case 176:

        this.$ = {
            //instrucciones : null,
            casos : null,
            nodo : null,
            nodo_casos : null
        }
    
break;
case 178:

        this.$ = null
    
break;
case 179:

        this.$ = {
            //instrucciones : new SentenciaIf($$[$0-3].instrucciones, $$[$0-1].instrucciones, $$[$0].instrucciones, _$[$0-5].first_line, _$[$0-5].first_column),
            nodo : new Nodo(null, "IF", null)
        };
        instruccion = new Nodo(null, "Condicion", null)
        instruccion.agregarHijos($$[$0-3].nodo);
        this.$.nodo.agregarHijos(instruccion)
        if($$[$0-1].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0-1].nodo)
        }

        if($$[$0].nodo != null)
        {
            this.$.nodo.agregarHijos($$[$0].nodo)
        }
    
break;
case 180:

        this.$ = {
            //instrucciones : $$[$0].instrucciones,
            nodo : new Nodo(null, "ELSE", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 185:

        this.$ = {
            contenido : {
                //instrucciones : null
            }
            ,
            nodo : null
        };
    
break;
case 186:

        this.$ = {
            contenido : $$[$0],
            estype : false
        }
    
break;
case 187:

        this.$ = {
            contenido : $$[$0-1],
            estype : true
        }
    
break;
case 188:

        this.$ = {
            //instrucciones : new Relacional($$[$0].instrucciones, null, OperacionesLogicas.NEGADO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('!', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 189:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.'&&', _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('&&', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 190:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.OR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('||', null, null) 
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 191:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo ('==', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 192:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.NOIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('!=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 193:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MENOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 194:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 195:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('<=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 196:

        this.$ = {
            //instrucciones : new Relacional($$[$0-2].instrucciones, $$[$0].instrucciones, OperacionesLogicas.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('>=', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 197:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0].instrucciones, null, OpcionesAritmeticas.NEGATIVO, _$[$0-1].first_line, _$[$0-1].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 198:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MAS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('+', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 199:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MENOS, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('-', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 200:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.POR, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('*', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 201:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.DIV, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('/', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 202:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.MODULO, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('%', null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 203:

        this.$ = {
            //instrucciones : new Aritmeticas($$[$0-2].instrucciones, $$[$0].instrucciones, OpcionesAritmeticas.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column),
            nodo : new Nodo('**', null, null, null)
        }
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 204:

        this.$ = {
            //instrucciones : new SentenciaTernaria($$[$0-4].instrucciones, $$[$0-2].instrucciones, $$[$0].instrucciones, _$[$0-4].first_line, _$[$0-4].first_column),
            nodo : new Nodo(null, "Ternaria", null)
        }
        instruccion = new Nodo(null, "Condicion", null);
        instruccion.agregarHijos($$[$0-4].nodo);
        this.$.nodo.agregarHijos(instruccion);
        this.$.nodo.agregarHijos($$[$0-2].nodo);
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 205:

        this.$ = {
            //instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 206:

        if($$[$0].includes('\"'))
        {
            this.$ = {
                //instrucciones : new Literal($$[$0].replace(/['"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/['"]+/g, ''), null, null)
            }
        }
        else if($$[$0].includes("'"))
        {
            this.$ = {
                //instrucciones : new Literal($$[$0].replace(/["'"]+/g, ''), _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0].replace(/["'"]+/g, ''), null, null)
            }
        }
        else
        {
            this.$ = {
                //instrucciones : new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1),
                nodo : new Nodo($$[$0], null, null)
            }
        }
    
break;
case 207:

        this.$ = {
            //instrucciones : new Variable($$[$0], null, 7, _$[$0].first_line, _$[$0].first_column),
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 208:

        this.$ = {
            nodo : new Nodo(null, 'EXP', null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 209:

        hermano = eval('$$');
        this.$ = {
            nodo : new Nodo(null, "Llamada", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        if(hermano[hermano.length - 1].nodo != null)
        {
            this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        }
    
break;
case 210: case 211: case 212:

        this.$ = {
            nodo : new Nodo($$[$0], null, null)
        }
    
break;
case 215:

        this.$ = {
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('++', null, null));
        
    
break;
case 216:

        this.$ = {
            nodo : new Nodo(null, "Incremento", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-1], null, null));
        this.$.nodo.agregarHijos(new Nodo('--', null, null));
    
break;
case 217:

        this.$ = {
            nodo : new Nodo("+=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 218:

        this.$ = {
            nodo : new Nodo("-=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 219:

        this.$ = {
            nodo : new Nodo("*=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 220:

        this.$ = {
            nodo : new Nodo("/=", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 221:

        this.$ = {
            nodo : new Nodo('%=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 222:

        this.$ = {
            nodo : new Nodo('**=', null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos($$[$0].nodo);
    
break;
case 223:

        hermano = eval('$$');
        this.$ = {
            nodo : new Nodo(null, "Imprimir", null)
        }
        if(hermano[hermano.length - 1].nodo != null)
        {
            this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
        }
    
break;
case 224:

        this.$ = {
            nodo : new Nodo(null, "GraficarTs", null)
        }
    
break;
case 225:

        hermano = eval('$$');
        this.$ = {
            nodo : null
        };
    
break;
case 228:

        this.$ = {
            nodo : new Nodo(null, "ATRIB", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null));
    
break;
case 229:

        hermano = eval('$$');
        this.$ = {
            nodo : hermano[hermano.length - 2].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 230: case 234: case 239: case 244:

        hermano = eval('$$');
        this.$ = {
            nodo : hermano[hermano.length - 1].nodo
        }
    
break;
case 232:

        this.$ = {
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 233: case 243:

        hermano = eval('$$');
        this.$ = {
            nodo : hermano[hermano.length - 3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 236:

        this.$ = {
            nodo : new Nodo("Valores", null, null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos($$[$0].nodo)
    
break;
case 237:

        hermano = eval('$$');
        this.$ = {
            nodo : hermano[hermano.length-3].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo);
    
break;
case 238:

        hermano = eval('$$');
        this.$ = {
            nodo : hermano[hermano.length -2].nodo
        }
        this.$.nodo.agregarHijos(hermano[hermano.length - 1].nodo)
    
break;
case 241:

        this.$ = {
            nodo : new Nodo(null, "Parametro", null) 
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null));
        this.$.nodo.agregarHijos(new Nodo(Type[$$[$0]], null, null));
    
break;
case 242:

        this.$ = {
            nodo : new Nodo(null, "Parametro", null)
        }
        this.$.nodo.agregarHijos(new Nodo($$[$0-2], null, null))
        this.$.nodo.agregarHijos(new Nodo($$[$0], null, null))
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,12:4,14:5,15:6,16:7,17:8,18:9,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:22,40:$V8,41:$V9,42:$Va,46:$Vb,58:$Vc,63:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm,94:$Vn},{1:[3]},{2:$V0,5:[1,45],6:46,12:4,14:5,15:6,16:7,17:8,18:9,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:22,40:$V8,41:$V9,42:$Va,46:$Vb,58:$Vc,63:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm,94:$Vn},o($Vo,[2,3]),{13:[1,47]},{13:[1,48]},{13:[1,49],31:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),{13:[1,65]},{36:[1,66]},{36:[1,67]},{36:[1,68]},{15:69,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:71,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:72,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},o($VF,[2,100]),o($VF,[2,101]),o($VF,[2,102]),o($VF,[2,103]),o($VG,$VH,{49:73,34:$VI,37:[1,74],51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,85:$VQ}),o($VF,[2,106]),o($VF,[2,107]),o($VF,[2,108]),o($VR,[2,20]),o($VR,[2,21]),o($VR,[2,22]),o($VR,[2,23]),o($VR,[2,24]),o($VR,[2,25]),o($VR,[2,26]),o($VR,[2,27]),o($VR,[2,28]),{36:[1,84]},{85:[1,85]},{34:[1,86]},{34:[1,87]},{13:[1,88]},{13:[1,89]},{7:90,8:$VS},{34:[1,92]},{13:[1,93],15:94,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{34:[1,95]},{34:[1,96]},{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),{15:97,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:98,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:99,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:100,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:101,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:102,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:103,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:104,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:105,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:106,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:107,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:108,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:109,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:110,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:111,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},o($Vo,[2,14]),{32:[1,112]},{32:[1,113]},{37:[1,114]},o($VF,[2,83]),o($VF,$VH,{49:115,34:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,85:$VQ}),o($VF,[2,92]),{39:[1,116],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($VG,$VT,{37:[1,117],85:$VU}),{8:[1,119],15:120,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},o($VF,[2,56]),o($VF,[2,57]),{15:121,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:122,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:123,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:124,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:125,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:128,34:$V5,36:$VE,38:22,39:[1,126],64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,86:127,87:$Vl,89:$Vm},{36:[1,129]},{34:[1,130]},{88:[1,131]},{39:[1,132]},{15:133,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},o($VR,[2,30]),o($VR,[2,29]),{41:[1,134]},{2:$VV,9:135,10:[1,136],11:137,12:138,15:139,16:140,17:141,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:22,40:$V8,41:$V9,42:$Va,46:$Vb,63:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{35:[1,143],36:[1,144]},o($VR,[2,31]),{13:[1,145],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{15:146,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:147,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},o([10,13,31,32,36,39,61,65,66],[2,84],{67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o([10,13,31,32,36,39,61,66],[2,85],{65:$Vq,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($VW,[2,86],{69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($VW,[2,87],{69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($VX,[2,88],{73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($VX,[2,89],{73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($VX,[2,90],{73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($VX,[2,91],{73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($VY,[2,93],{75:$VA,76:$VB,77:$VC,78:$VD}),o($VY,[2,94],{75:$VA,76:$VB,77:$VC,78:$VD}),o($VZ,[2,95],{78:$VD}),o($VZ,[2,96],{78:$VD}),o($VZ,[2,97],{78:$VD}),o($VF,[2,98]),{32:[1,148],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{36:[1,150],62:149,90:$V_,91:$V$,92:$V01,93:$V11},{36:[1,156],62:155,90:$V_,91:$V$,92:$V01,93:$V11},{8:[1,157]},o($VF,$VT,{85:$VU}),o($VF,[2,99]),{8:[1,159],15:158,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{36:[1,160]},{36:$V21,50:161},{13:[1,163],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($V31,[2,58],{65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V31,[2,59],{65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V31,[2,60],{65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V31,[2,61],{65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V31,[2,62],{65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($VF,[2,111]),{39:[1,164],61:$V41},o($V51,[2,117],{65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($V61,[2,110]),{36:$V71,39:[1,168],95:166,96:167,142:169},{34:[1,171]},o($VF,[2,115]),{39:[1,172],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{34:[1,173]},{2:$VV,10:[1,174],11:175,12:138,15:139,16:140,17:141,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:22,40:$V8,41:$V9,42:$Va,46:$Vb,63:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},o($V81,[2,5]),o($V91,[2,7]),{13:[1,176]},{13:[1,177],31:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($V91,[2,17]),o($V91,[2,18]),{13:[1,178]},{36:[1,179]},{37:[1,180]},o($VR,[2,32]),{39:[1,181],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{39:[1,182],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{15:183,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{13:[2,71],37:[1,184]},{13:[2,74],37:[1,185]},o($Va1,[2,118]),o($Va1,[2,119]),o($Va1,[2,120]),o($Va1,[2,121]),{13:[2,76],37:[1,186]},{37:[1,187]},{36:[1,189],59:188},{13:[1,190],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{36:$V21,50:191},o($V61,[2,109]),{10:[1,192],36:$Vb1},{32:[1,194]},o($VR,[2,55]),o($VF,[2,112]),{15:195,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},o($Vo,[2,122]),{39:[1,196]},{32:[1,197]},{39:[2,244],61:[1,199],143:198},{32:[1,200]},{15:128,34:$V5,36:$VE,38:22,39:[1,201],64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,86:202,87:$Vl,89:$Vm},{7:203,8:$VS},{15:204,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},o($V81,[2,4]),o($V91,[2,6]),o($V91,[2,15]),o($V91,[2,16]),o($V91,[2,19]),{37:[1,205]},{15:206,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{8:[1,207]},{7:208,8:$VS},{13:[1,209],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{15:210,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{8:[1,211],15:212,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{15:213,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{8:[1,214],36:[1,215]},{10:[1,216],36:[1,217]},{32:[1,218]},o($VR,[2,52]),{10:[1,219],36:$Vb1},{13:[1,220]},{32:[1,221]},{15:222,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},o($V51,[2,116],{65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),{32:[1,223]},{36:$Vc1,62:225,90:$V_,91:$V$,92:$V01,93:$V11,97:224},{39:[2,240]},{36:$V71,96:227,142:169},{36:[1,229],62:228,90:$V_,91:$V$,92:$V01,93:$V11},o($VF,[2,113]),{39:[1,230],61:$V41},o($VR,[2,48],{47:231,48:[1,232]}),{39:[1,233],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{15:234,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{13:[1,235],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{10:[1,237],43:236,44:[1,238],45:[1,239]},o($VR,[2,37]),o($VR,[2,33]),{13:[2,70],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{36:$V21,50:240},{13:[2,73],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{13:[2,75],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{36:$V21,50:241},{13:[2,78]},{13:[2,63]},{32:[1,242]},{60:[1,243]},{13:[1,244]},o($VR,[2,54]),{15:245,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},o($Vd1,[2,82],{61:[1,246],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),{36:$Vc1,62:225,90:$V_,91:$V$,92:$V01,93:$V11,97:247},{8:$Ve1,98:248},{8:[2,125]},{8:[2,126]},{39:[2,243]},o($V51,[2,241]),o($V51,[2,242]),o($VF,[2,114]),o($VR,[2,49]),{7:251,8:$VS,19:250,46:$Vb},{13:[1,252]},{13:[1,253],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{15:254,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{10:[1,255],44:[1,256],45:[1,257]},o($VR,[2,39]),{15:258,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{32:[1,259]},{10:[1,260],36:$Vb1},{10:[1,261],36:$Vb1},{60:[1,262]},o($Vd1,[2,69],{13:[1,264],61:[1,263]}),o($VR,[2,53]),o($Vd1,[2,80],{61:[1,265],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD}),o($Vd1,[2,81]),{8:$Ve1,98:266},o($Vo,[2,124]),{2:$Vf1,10:[1,269],28:$Vg1,29:$Vh1,30:$Vi1,33:$Vj1,34:$Vk1,35:$Vl1,36:$Vm1,40:$Vn1,41:$Vo1,42:$Vp1,46:$Vq1,63:$Vr1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,87:$Vz1,89:$VA1,99:267,100:268,101:270,103:271,105:272,108:275,109:276,110:277,111:278,112:279,113:280,114:281,115:282,133:293},o($VR,[2,50]),o($VR,[2,51]),o($VR,[2,36]),{15:304,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{13:[1,305],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($VR,[2,38]),{15:306,34:$V5,36:$VE,38:22,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,83:23,84:$Vk,87:$Vl,89:$Vm},{32:[1,307]},{32:[1,308],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($VB1,[2,46],{38:22,83:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,11:137,12:138,15:139,16:140,17:141,9:309,2:$VV,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,63:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),{13:[2,72]},{13:[2,77]},o($Vd1,[2,66],{13:[1,311],61:[1,310]}),o($Vd1,[2,67]),o($Vd1,[2,68]),o($Vd1,[2,79]),o($Vo,[2,123]),o($V81,[2,127]),{10:[1,312]},o($V81,[2,129]),o($VB1,[2,132],{101:270,103:271,105:272,108:275,109:276,110:277,111:278,112:279,113:280,114:281,115:282,133:293,102:313,100:314,2:$Vf1,28:$Vg1,29:$Vh1,30:$Vi1,33:$Vj1,34:$Vk1,35:$Vl1,36:$Vm1,40:$Vn1,41:$Vo1,42:$Vp1,46:$Vq1,63:$Vr1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,87:$Vz1,89:$VA1}),{13:[2,185],31:$VC1,37:[1,331],65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1,104:315},{13:[1,332]},{36:[1,333]},{36:[1,334]},o($V91,[2,137]),o($V91,[2,138]),o($V91,[2,139]),o($V91,[2,140]),o($V91,[2,141]),o($V91,[2,142]),o($V91,[2,143]),o($V91,[2,144]),{10:[1,336],13:[1,335]},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:337,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:338,133:293},o($VR1,[2,205]),o($VR1,[2,206]),o($VR1,[2,207],{131:339,136:349,34:[1,340],51:[1,341],52:[1,342],53:[1,343],54:[1,344],55:[1,345],56:[1,346],57:[1,347],85:$VS1,134:[1,348]}),o($VR1,[2,210]),o($VR1,[2,211]),o($VR1,[2,212]),{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:351,133:293},o($VR1,[2,214]),{85:[1,352]},{34:[1,353]},{34:[1,354]},{34:[1,355]},{34:[1,356]},{8:$Ve1,98:357},{34:[1,358]},{13:[1,359]},{13:[1,360]},{13:[1,363],34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:362,122:361,133:293},{13:[1,364],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},{36:$VT1,38:365},{32:[1,367],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,74:$Vz,75:$VA,76:$VB,77:$VC,78:$VD},o($VB1,[2,43],{38:22,83:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,11:137,12:138,15:139,16:140,17:141,9:368,2:$VV,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,63:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),o($VB1,[2,45],{38:22,83:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,11:137,12:138,15:139,16:140,17:141,9:369,2:$VV,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,63:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),o($VB1,[2,47],{38:22,83:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,12:138,15:139,16:140,17:141,11:175,2:$VV,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,63:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),o($Vd1,[2,64]),o($Vd1,[2,65]),o($V81,[2,128]),o($VB1,[2,130]),o($VB1,[2,131]),{13:[1,370]},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:371,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:372,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:373,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:374,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:375,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:376,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:377,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:378,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:379,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:380,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:381,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:382,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:383,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:384,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:385,133:293},{8:[1,388],34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:387,130:386,133:293},o($V91,[2,134]),{32:[1,390],106:389},{32:[1,392],107:391},o($V91,[2,145]),o($V91,[2,146]),o($VR1,[2,188]),o($VR1,[2,197]),o($VR1,[2,208]),{34:$Vk1,36:$Vm1,39:$VU1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:397,132:393,133:293,135:395,138:396},o($VR1,[2,215]),o($VR1,[2,216]),{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:398,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:399,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:400,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:401,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:402,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:403,133:293},o($VR1,[2,230],{136:349,137:404,131:405,85:$VS1}),{36:[1,406]},{31:$VC1,39:[1,407],65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{88:[1,408]},{39:[1,409]},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:410,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:411,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:412,133:293},{41:[1,413]},{34:$Vk1,35:[1,415],36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:416,123:414,133:293},o($V91,[2,162]),o($V91,[2,163]),o($V91,[2,159]),{13:[1,417],31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},o($V91,[2,161]),{36:$VT1,38:418},{39:[1,419]},{51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP},o($VB1,[2,41],{38:22,83:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,11:137,12:138,15:139,16:140,17:141,9:420,2:$VV,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,63:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),o($VB1,[2,42],{38:22,83:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,12:138,15:139,16:140,17:141,11:175,2:$VV,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,63:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),o($VB1,[2,44],{38:22,83:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,12:138,15:139,16:140,17:141,11:175,2:$VV,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,63:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),o($V91,[2,133]),o([10,13,31,32,36,37,39,61,65,66],[2,189],{67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o([10,13,31,32,36,37,39,61,66],[2,190],{65:$VD1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($VV1,[2,191],{69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($VV1,[2,192],{69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($VW1,[2,193],{73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($VW1,[2,194],{73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($VW1,[2,195],{73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($VW1,[2,196],{73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($VX1,[2,198],{75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($VX1,[2,199],{75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($VY1,[2,200],{78:$VQ1}),o($VY1,[2,201],{78:$VQ1}),o($VY1,[2,202],{78:$VQ1}),o($VR1,[2,203]),{31:$VC1,32:[1,421],65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{13:[2,184]},{13:[2,186],31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{36:$VZ1,121:422,140:423},o($V91,[2,135]),{36:[1,427],62:426,90:$V_,91:$V$,92:$V01,93:$V11,118:425},o($V91,[2,136]),{36:[1,430],62:429,90:$V_,91:$V$,92:$V01,93:$V11,116:428},o($VR1,[2,209]),o($VR1,[2,225]),{39:[1,431]},{39:[2,234],61:[1,433],139:432},o($V51,[2,232],{31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($V_1,[2,217],{31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($V_1,[2,218],{31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($V_1,[2,219],{31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($V_1,[2,220],{31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($V_1,[2,221],{31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($V_1,[2,222],{31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),o($VR1,[2,227]),o($VR1,[2,229]),o($V61,[2,228]),o($VR1,[2,213]),{34:[1,434]},{13:[2,224]},{31:$VC1,39:[1,435],65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{31:$VC1,39:[1,436],65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{31:$VC1,39:[1,437],65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{34:[1,438]},o($V91,[2,164]),{36:[1,439]},{31:$VC1,37:[1,440],65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},o($V91,[2,160]),{39:[1,441]},{7:442,8:$VS},o($VB1,[2,40],{38:22,83:23,19:25,20:26,21:27,22:28,23:29,24:30,25:31,26:32,27:33,12:138,15:139,16:140,17:141,11:175,2:$VV,28:$V1,29:$V2,30:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:$V8,41:$V9,42:$Va,46:$Vb,63:$Vd,64:$Ve,73:$Vf,79:$Vg,80:$Vh,81:$Vi,82:$Vj,84:$Vk,87:$Vl,89:$Vm}),{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:443,133:293},{10:[1,444]},{10:[2,239],36:$VZ1,61:[1,446],121:447,140:423,141:445},{32:[1,448]},o($V91,[2,150]),{13:[1,450],37:[1,451],119:449},{13:[1,453],37:[1,454],120:452},o($V91,[2,147]),{37:[1,455]},{37:[1,456]},o($VR1,[2,226]),{39:[2,231]},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:397,133:293,135:457,138:396},{34:$Vk1,36:$Vm1,39:$VU1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:397,132:458,133:293,135:395,138:396},{8:$Ve1,98:459},{8:[1,460]},{8:$Ve1,98:461},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:462,133:293},{37:[1,463]},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:464,133:293},{7:465,8:$VS},o($VR,[2,35]),o($V_1,[2,204],{31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),{13:[2,187]},{10:[2,235]},{36:$VZ1,121:466,140:423},{10:[2,238]},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:467,133:293},o($V91,[2,151]),o($V91,[2,153]),{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:468,133:293},o($V91,[2,152]),o($V91,[2,155]),{8:$V$1,34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:471,117:469,133:293},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:472,133:293},{8:$V$1,34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:471,117:473,133:293},{39:[2,233]},{13:[2,223]},o($V91,[2,181],{128:474,48:[1,475]}),{10:[1,478],44:$V02,45:$V12,124:476,125:477},o($V91,[2,168]),{31:$VC1,39:[1,481],65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:482,133:293},{13:[1,483],31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},o($VR,[2,34]),{10:[2,237]},o([10,36,61],[2,236],{31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1}),{13:[1,484],31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},o($V91,[2,156]),{36:$VZ1,121:485,140:423},{13:[1,486],31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{13:[1,487],31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},o($V91,[2,149]),o($V91,[2,179]),{8:$Ve1,46:$Vq1,98:490,108:489,129:488},o($V91,[2,169]),{10:[1,491]},o($V91,[2,171]),{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:492,133:293},{32:[1,493]},{13:[1,494]},{13:[1,495],31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:496,133:293},o($V91,[2,154]),{10:[1,497]},o($V91,[2,158]),o($V91,[2,148]),o($V91,[2,180]),o($V91,[2,182]),o($V91,[2,183]),o($V91,[2,170]),{31:$VC1,32:[1,498],65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{2:$Vf1,10:$V22,28:$Vg1,29:$Vh1,30:$Vi1,33:$Vj1,34:$Vk1,35:$Vl1,36:$Vm1,40:$Vn1,41:$Vo1,42:$Vp1,44:$V02,45:$V12,46:$Vq1,63:$Vr1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,87:$Vz1,89:$VA1,100:500,101:270,103:271,105:272,108:275,109:276,110:277,111:278,112:279,113:280,114:281,115:282,125:501,126:499,133:293},o($V91,[2,167]),{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:502,133:293},{13:[1,503],31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{13:[1,504]},{2:$Vf1,10:$V22,28:$Vg1,29:$Vh1,30:$Vi1,33:$Vj1,34:$Vk1,35:$Vl1,36:$Vm1,40:$Vn1,41:$Vo1,42:$Vp1,44:$V02,45:$V12,46:$Vq1,63:$Vr1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,87:$Vz1,89:$VA1,100:500,101:270,103:271,105:272,108:275,109:276,110:277,111:278,112:279,113:280,114:281,115:282,125:501,126:505,133:293},{10:[2,173]},{10:[2,178],44:$V02,45:$V12,125:507,127:506},{10:[2,175]},{13:[1,508],31:$VC1,65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:509,133:293},o($V91,[2,157]),{10:[2,172]},{10:[2,174]},{10:[2,177]},{34:$Vk1,36:$Vm1,64:$Vs1,73:$Vt1,79:$Vu1,80:$Vv1,81:$Vw1,82:$Vx1,84:$Vy1,103:510,133:293},{31:$VC1,39:[1,511],65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{31:$VC1,39:[1,512],65:$VD1,66:$VE1,67:$VF1,68:$VG1,69:$VH1,70:$VI1,71:$VJ1,72:$VK1,73:$VL1,74:$VM1,75:$VN1,76:$VO1,77:$VP1,78:$VQ1},{8:$Ve1,98:513},{8:$Ve1,98:514},o($V91,[2,166]),o($V91,[2,165])],
defaultActions: {45:[2,1],198:[2,240],215:[2,78],216:[2,63],225:[2,125],226:[2,126],227:[2,243],260:[2,72],261:[2,77],386:[2,184],409:[2,224],432:[2,231],444:[2,187],445:[2,235],447:[2,238],457:[2,233],458:[2,223],466:[2,237],499:[2,173],501:[2,175],505:[2,172],506:[2,174],507:[2,177]},
parseError: function parseError (str, hash) {
    console.log(hash)
    if (hash.recoverable) {
        this.trace(str);
        let textoerror = "Se encontro: " + hash.text + ", se esperaba: ";
        for(let i = 0; i < hash.expected.length; i++)
        {
            if(i != hash.expected.length - 1)
            {
                textoerror += hash.expected[i] + ",";
            }
            else
            {
                textoerror += hash.expected[i];
            }
        }

        lerrores.push(new _Error(hash.loc.first_line, hash.loc.last_column + 1, "Sintactico", textoerror));
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let auxnodo = null
    const { Nodo } = require('../Arbol/Nodo');
    const { Type } = require('../Retorno');
    const { Aritmetica, OpcionesAritmeticas } = require('../Expresiones/Aritmeticas');
    const { Literal } = require('../Expresiones/Literal')
    const { OpcionesLogicas, Logica} = require('../Expresiones/Logicas');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Variable } = require('../Expresiones/Variable');
    const { lerrores, _Error } = require("../Errores/Error");
    const { Imprimir } = require("../Instrucciones/Imprimir");
    const { Asignacion } = require("../Instrucciones/Asignacion");
    const { Sentenciaif } = require("../Instrucciones/Sentenciaif");
    const { Cuerposentencia } = require("../Instrucciones/Cuerposentencia");
    const { Incremento } = require("../Instrucciones/Incremento");
    const { Sentenciawhile } = require("../Instrucciones/Sentenciawhile");
    const { Sentenciadowhile } = require("../Instrucciones/Sentenciadowhile");
    const { Sentenciafor } = require("../Instrucciones/Sentenciafor");
    const { Break } = require("../Instrucciones/Break");
    const { Continue } = require("../Instrucciones/Continue");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 79
break;
case 5:return 80
break;
case 6:return 35
break;
case 7:return 63
break;
case 8:return 90
break;
case 9:return 91
break;
case 10:return 92
break;
case 11:return 93
break;
case 12:return 58
break;
case 13:return 84
break;
case 14:return 81
break;
case 15:return 82
break;
case 16:return 46
break;
case 17:return 48
break;
case 18:return 42
break;
case 19:return 44
break;
case 20:return 41
break;
case 21:return 40
break;
case 22:return 33
break;
case 23:return 'IN'
break;
case 24:return 'OF'
break;
case 25:return 29
break;
case 26:return 28
break;
case 27:return 30
break;
case 28:return 94
break;
case 29:return 87
break;
case 30:return 88
break;
case 31:return 89
break;
case 32:return 45
break;
case 33:return 'LENGTH'
break;
case 34:return 'CHARAT'
break;
case 35:return 'TOLOWERCASE'
break;
case 36:return 'TOUPPERCASE'
break;
case 37:return 'CONCAT'
break;
case 38:return 51
break;
case 39:return 52
break;
case 40:return 53
break;
case 41:return 54
break;
case 42:return 55
break;
case 43:return 56
break;
case 44:return 57
break;
case 45:return 134
break;
case 46:return 32
break;
case 47:return 13
break;
case 48:return 65
break;
case 49:return 66
break;
case 50:return 67
break;
case 51:return 68
break;
case 52:return 64
break;
case 53:return 77
break;
case 54:return 78
break;
case 55:return 71
break;
case 56:return 72
break;
case 57:return 69
break;
case 58:return 70
break;
case 59:return 37
break;
case 60:return 74
break;
case 61:return 73
break;
case 62:return 75
break;
case 63:return 76
break;
case 64:return 85
break;
case 65:return 34
break;
case 66:return 39
break;
case 67:return 61
break;
case 68:return 8
break;
case 69:return 10
break;
case 70:return 31
break;
case 71:return '['
break;
case 72:return ']'
break;
case 73:return 36;
break;
case 74:return 5;
break;
case 75: 
                            console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
                            lerrores.push(new _Error(yy_.yylloc.first_line, yy_.yylloc.first_column, "Lexico", "El simbolo: " + yy_.yytext + " no pertenece al lenguaje"))
                        
break;
}
},
rules: [/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:([0-9]+(\.[0-9]+)?))/,/^(?:(("[^\"]*")|(`[^"`"]*`)|('[^"'"]*')))/,/^(?:let\b)/,/^(?:const\b)/,/^(?:string\b)/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:void\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:function\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:graficar_ts\b)/,/^(?:default\b)/,/^(?:Length\b)/,/^(?:CharAt\b)/,/^(?:ToLowerCase\b)/,/^(?:ToUpperCase\b)/,/^(?:Concat\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\*\*=)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:\*\*)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}